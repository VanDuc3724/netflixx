@model IEnumerable<Netflixx.Models.BrandSouModel>
@{
    ViewData["Title"] = "Brand List";
}

<style>
    .brand-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        margin-top: 10rem;
        background-color: #FF99FF;
    }

    .brand-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb;
    }

    .brand-title {
        font-size: 1.875rem;
        font-weight: 600;
        color: #1f2937;
        margin: 0;
    }

    .btn-create {
        background-color: #3b82f6;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.375rem;
        text-decoration: none;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .btn-create:hover {
            background-color: #2563eb;
            color: white;
            text-decoration: none;
        }

    /* Controls Section */
    .controls-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .search-container {
        position: relative;
        flex-grow: 1;
        max-width: 400px;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid #d1d5db;
        border-radius: 0.5rem;
        font-size: 1rem;
        transition: border-color 0.2s, box-shadow 0.2s;
        background-color: white;
    }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6b7280;
        font-size: 1.1rem;
    }

    .search-clear {
        position: absolute;
        right: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #6b7280;
        cursor: pointer;
        font-size: 1.2rem;
        padding: 0.25rem;
        border-radius: 0.25rem;
        display: none;
        transition: color 0.2s;
    }

        .search-clear:hover {
            color: #374151;
        }

        .search-clear.show {
            display: block;
        }

    .display-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .items-per-page {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #6b7280;
        font-size: 0.875rem;
    }

        .items-per-page select {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            background-color: white;
            color: #374151;
            font-size: 0.875rem;
        }

    .results-info {
        color: #6b7280;
        font-size: 0.875rem;
        white-space: nowrap;
    }

    .brand-table {
        width: 100%;
        background: white;
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1.5rem;
    }

        .brand-table table {
            width: 100%;
            border-collapse: collapse;
        }

        .brand-table th {
            background-color: #f8fafc;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #374151;
            border-bottom: 1px solid #e5e7eb;
        }

        .brand-table td {
            padding: 1rem;
            border-bottom: 1px solid #f3f4f6;
            color: #6b7280;
        }

        .brand-table tr:last-child td {
            border-bottom: none;
        }

        .brand-table tr:hover {
            background-color: #f9fafb;
        }

    .brand-name {
        font-weight: 500;
        color: #1f2937;
    }

    .brand-description {
        color: #6b7280;
        max-width: 300px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .btn-edit {
        background-color: #f59e0b;
        color: white;
        padding: 0.25rem 0.75rem;
        border: none;
        border-radius: 0.25rem;
        text-decoration: none;
        font-size: 0.875rem;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .btn-edit:hover {
            background-color: #d97706;
            color: white;
            text-decoration: none;
        }

    .btn-delete {
        background-color: #ef4444;
        color: black;
        padding: 0.25rem 0.75rem;
        border: none;
        border-radius: 0.25rem;
        text-decoration: none;
        font-size: 0.875rem;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .btn-delete:hover {
            background-color: #dc2626;
            color: black;
            text-decoration: none;
        }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #6b7280;
    }

    .empty-state-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    /* Pagination Styles */
    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        margin-top: 2rem;
    }

    .pagination {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .pagination-btn {
        padding: 0.5rem 0.75rem;
        border: 1px solid #d1d5db;
        background-color: white;
        color: #374151;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: all 0.2s;
        text-decoration: none;
        font-size: 0.875rem;
        min-width: 2.5rem;
        text-align: center;
    }

        .pagination-btn:hover:not(.disabled) {
            background-color: #f3f4f6;
            border-color: #9ca3af;
        }

        .pagination-btn.active {
            background-color: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        .pagination-btn.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background-color: #f9fafb;
        }

    .pagination-info {
        color: #6b7280;
        font-size: 0.875rem;
    }

    /* Responsive Design */
    
</style>

<div class="brand-container">
    <div class="brand-header">
        <h1 class="brand-title">Brand List</h1>
        <a asp-action="Create" class="btn-create">+ Create New</a>
    </div>

    <div class="controls-section">
        <div class="search-container">
            <span class="search-icon">🔍</span>
            <input type="text" id="searchInput" class="search-input" placeholder="Search brands by name...">
            <button type="button" id="clearSearch" class="search-clear">✕</button>
        </div>

        <div class="display-controls">
            <div class="items-per-page">
                <label for="itemsPerPage">Show:</label>
                <select id="itemsPerPage">
                    <option value="5" selected>5</option>
                    <option value="10" >10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                    <option value="all">All</option>
                </select>
            </div>
            <div class="results-info" id="resultsInfo">
                Showing 0 of 0 brands
            </div>
        </div>
    </div>

    <div class="brand-table">
        @if (Model != null && Model.Any())
        {
            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th style="width: 150px;">Actions</th>
                    </tr>
                </thead>
                <tbody id="brandTableBody">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                <div class="brand-name">@item.Name</div>
                            </td>
                            <td>
                                <div class="brand-description" title="@item.Description">
                                    @item.Description
                                </div>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn-edit">Edit</a>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn-delete" data-id="@item.Id" data-name="@item.Name" data-description="@item.Description">Delete</a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">📦</div>
                <h3>No brands found</h3>
                <p>Get started by creating your first brand.</p>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div class="pagination-container" id="paginationContainer">
        <div class="pagination-info" id="paginationInfo">
            Page 1 of 1
        </div>
        <div class="pagination" id="pagination">
            <!-- Pagination buttons will be generated by JavaScript -->
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');
        const clearButton = document.getElementById('clearSearch');
        const itemsPerPageSelect = document.getElementById('itemsPerPage');
        const resultsInfo = document.getElementById('resultsInfo');
        const paginationContainer = document.getElementById('paginationContainer');
        const paginationInfo = document.getElementById('paginationInfo');
        const pagination = document.getElementById('pagination');
        const tableBody = document.getElementById('brandTableBody');
        const tableElement = document.querySelector('.brand-table table');

        let allRows = Array.from(document.querySelectorAll('.brand-table tbody tr'));
        let filteredRows = [...allRows];
        let currentPage = 1;
        let itemsPerPage = 5;

        function updateDisplay() {
            const searchTerm = searchInput.value.toLowerCase().trim();

            // Filter rows based on search
            filteredRows = allRows.filter(row => {
                const brandName = row.querySelector('.brand-name');
                if (brandName) {
                    const name = brandName.textContent.toLowerCase();
                    return name.includes(searchTerm);
                }
                return false;
            });

            // Update results info
            updateResultsInfo();

            // Reset to first page if current page is out of bounds
            const maxPage = Math.ceil(filteredRows.length / itemsPerPage);
            if (currentPage > maxPage && maxPage > 0) {
                currentPage = 1;
            }

            // Show/hide pagination
            if (itemsPerPage === 'all' || filteredRows.length <= itemsPerPage) {
                paginationContainer.style.display = 'none';
            } else {
                paginationContainer.style.display = 'flex';
            }

            // Display current page
            displayCurrentPage();

            // Update pagination buttons
            updatePagination();

            // Show/hide clear button
            clearButton.classList.toggle('show', searchTerm.length > 0);

            // Handle empty states
            handleEmptyStates(searchTerm);
        }

        function updateResultsInfo() {
            const totalFiltered = filteredRows.length;
            const totalAll = allRows.length;

            if (totalFiltered === totalAll) {
                resultsInfo.textContent = `Showing ${totalFiltered} brands`;
            } else {
                resultsInfo.textContent = `Showing ${totalFiltered} of ${totalAll} brands`;
            }
        }

        function displayCurrentPage() {
            // Hide all rows first
            allRows.forEach(row => row.style.display = 'none');

            if (itemsPerPage === 'all') {
                // Show all filtered rows
                filteredRows.forEach(row => row.style.display = '');
            } else {
                // Show only current page rows
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const currentPageRows = filteredRows.slice(startIndex, endIndex);

                currentPageRows.forEach(row => row.style.display = '');
            }
        }

        function updatePagination() {
            const totalPages = Math.ceil(filteredRows.length / itemsPerPage);

            if (itemsPerPage === 'all' || totalPages <= 1) {
                pagination.innerHTML = '';
                paginationInfo.textContent = '';
                return;
            }

            // Update pagination info
            paginationInfo.textContent = `Page ${currentPage} of ${totalPages}`;

            // Generate pagination buttons
            let paginationHTML = '';

            // Previous button
            paginationHTML += `
                <button class="pagination-btn ${currentPage === 1 ? 'disabled' : ''}"
                        onclick="goToPage(${currentPage - 1})"
                        ${currentPage === 1 ? 'disabled' : ''}>
                    ‹
                </button>
            `;

            // Page numbers
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            if (startPage > 1) {
                paginationHTML += `<button class="pagination-btn" onclick="goToPage(1)">1</button>`;
                if (startPage > 2) {
                    paginationHTML += `<span class="pagination-btn disabled">...</span>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <button class="pagination-btn ${i === currentPage ? 'active' : ''}"
                            onclick="goToPage(${i})">
                        ${i}
                    </button>
                `;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<span class="pagination-btn disabled">...</span>`;
                }
                paginationHTML += `<button class="pagination-btn" onclick="goToPage(${totalPages})">${totalPages}</button>`;
            }

            // Next button
            paginationHTML += `
                <button class="pagination-btn ${currentPage === totalPages ? 'disabled' : ''}"
                        onclick="goToPage(${currentPage + 1})"
                        ${currentPage === totalPages ? 'disabled' : ''}>
                    ›
                </button>
            `;

            pagination.innerHTML = paginationHTML;
        }

        function handleEmptyStates(searchTerm) {
            if (filteredRows.length === 0) {
                if (tableElement) tableElement.style.display = 'none';
                if (searchTerm !== '') {
                    showNoResultsMessage();
                }
            } else {
                if (tableElement) tableElement.style.display = '';
                hideNoResultsMessage();
            }
        }

        function showNoResultsMessage() {
            let noResultsDiv = document.querySelector('.no-results-message');
            if (!noResultsDiv) {
                noResultsDiv = document.createElement('div');
                noResultsDiv.className = 'empty-state no-results-message';
                noResultsDiv.innerHTML = `
                    <div class="empty-state-icon">🔍</div>
                    <h3>No brands found</h3>
                    <p>No brands match your search criteria. Try a different search term.</p>
                `;
                document.querySelector('.brand-table').appendChild(noResultsDiv);
            }
            noResultsDiv.style.display = 'block';
        }

        function hideNoResultsMessage() {
            const noResultsDiv = document.querySelector('.no-results-message');
            if (noResultsDiv) {
                noResultsDiv.style.display = 'none';
            }
        }

        function clearSearch() {
            searchInput.value = '';
            updateDisplay();
            searchInput.focus();
        }

        // Global function for pagination buttons
        window.goToPage = function(page) {
            const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
            if (page >= 1 && page <= totalPages) {
                currentPage = page;
                updateDisplay();
            }
        };

        // Event listeners
        searchInput.addEventListener('input', updateDisplay);
        searchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                clearSearch();
            }
        });

        clearButton.addEventListener('click', clearSearch);

        itemsPerPageSelect.addEventListener('change', function() {
            const value = this.value;
            itemsPerPage = value === 'all' ? 'all' : parseInt(value);
            currentPage = 1;
            updateDisplay();
        });

        // Initial display update
        updateDisplay();
    });
</script>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-black">Delete Brand</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-black">
                <p> Bạn chắc chắn muốn xóa: <strong id="brandNameToDelete"></strong>?</p>
                <p id="brandDescriptionToDelete" class="text-muted"></p>
            </div>
            <div class="modal-footer">
                <form id="deleteForm" method="post" asp-action="Delete">
                    <input type="hidden" id="brandIdToDelete" name="id" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.btn-delete').forEach(btn => {
            btn.addEventListener('click', function (e) {
                e.preventDefault();
                const id = this.getAttribute('data-id');
                const name = this.getAttribute('data-name');
                const description = this.getAttribute('data-description');
                document.getElementById('brandIdToDelete').value = id;
                document.getElementById('brandNameToDelete').textContent = name;
                document.getElementById('brandDescriptionToDelete').textContent = description || '';
                document.getElementById('deleteForm').setAttribute('action', '/BrandManager/Delete/' + id);
                const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
                modal.show();
            });
        });
    });
</script>