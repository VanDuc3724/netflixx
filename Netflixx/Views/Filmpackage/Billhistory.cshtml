<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CineViet - Lịch Sử Đơn Hàng & Thanh Toán</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #0f111a;
            color: #ffffff;
        }

        main {
            padding: 40px 5%;
        }

        .page-title {
            text-align: center;
            margin-bottom: 50px;
        }

            .page-title h1 {
                font-size: 36px;
                margin-bottom: 15px;
            }

            .page-title p {
                font-size: 18px;
                color: #cccccc;
                max-width: 700px;
                margin: 0 auto;
            }

        .billing-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .current-plan {
            background-color: #1a1f33;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 40px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .plan-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .plan-info h2 {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .plan-type {
            font-size: 22px;
            font-weight: 600;
            color: #e50914;
        }

        .plan-details {
            color: #cccccc;
            line-height: 1.6;
        }

        .plan-actions {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

            .plan-actions button {
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: 600;
                cursor: pointer;
                font-size: 16px;
                border: none;
                transition: background-color 0.3s;
            }

        .change-plan-btn {
            background-color: #3949ab;
            color: #ffffff;
        }

            .change-plan-btn:hover {
                background-color: #303f9f;
            }

        .cancel-plan-btn {
            background-color: transparent;
            color: #cccccc;
            border: 1px solid #cccccc;
        }

            .cancel-plan-btn:hover {
                background-color: rgba(255, 255, 255, 0.1);
            }

        .history-section {
            background-color: #1a1f33;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .history-section h2 {
            font-size: 24px;
        }

        .filter-dropdown {
            padding: 8px 16px;
            background-color: #2a304a;
            color: #ffffff;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
        }

            .filter-dropdown:focus {
                outline: none;
            }

        .billing-table-container {
            overflow-x: auto;
        }

        .billing-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            .billing-table th, .billing-table td {
                padding: 15px 20px;
                text-align: left;
                border-bottom: 1px solid #2a304a;
            }

            .billing-table th {
                background-color: #161a2b;
                font-weight: 600;
            }

            .billing-table tr:nth-child(even) {
                background-color: #1e2337;
            }

        .action-btn {
            padding: 5px 10px;
            background-color: transparent;
            color: #3949ab;
            border: none;
            cursor: pointer;
            font-size: 14px;
            text-decoration: underline;
        }

            .action-btn:hover {
                color: #e50914;
            }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 30px;
            gap: 5px;
            flex-wrap: wrap;
        }

            .pagination button {
                min-width: 36px;
                height: 36px;
                border-radius: 6px;
                background-color: #2a304a;
                color: #ffffff;
                border: none;
                cursor: pointer;
                font-size: 16px;
                transition: background-color 0.3s;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0 8px;
            }

                .pagination button:hover {
                    background-color: #3949ab;
                }

                .pagination button.active {
                    background-color: #e50914;
                }

                .pagination button:disabled {
                    background-color: #1a1f33;
                    color: #666;
                    cursor: not-allowed;
                }

        .loading {
            text-align: center;
            padding: 40px;
            color: #cccccc;
        }

        .error-message {
            background-color: #dc3545;
            color: white;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            text-align: center;
        }

        .refresh-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            margin-left: 15px;
        }

            .refresh-btn:hover {
                background-color: #218838;
            }

        .username-info {
            background-color: #2a304a;
            padding: 10px 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #cccccc;
        }
    </style>
</head>
<body>
    <main>
        <div class="page-title">
            <h1>Lịch Sử Đơn Hàng & Thanh Toán</h1>
            <p>Quản lý gói dịch vụ, phương thức thanh toán và xem lịch sử thanh toán của bạn</p>
        </div>

        <div class="billing-container">
            <!-- Thông tin gói hiện tại -->
            <div class="current-plan">
                <div class="plan-header">
                    <div class="plan-info">
                        <h2>Gói dịch vụ hiện tại</h2>
                        <div class="plan-type" id="currentPlanType">Đang cập nhật...</div>
                        <div class="plan-details" id="currentPlanDetails">Đang tải thông tin gói...</div>
                    </div>
                </div>
                <div class="plan-details">
                    <p id="planDescription">Đang tải thông tin chi tiết gói dịch vụ...</p>
                </div>
            </div>

            <!-- Lịch sử thanh toán -->
            <div class="history-section">
                <div class="history-header">
                    <h2>Lịch sử thanh toán</h2>
                    <div>
                        <select class="filter-dropdown" id="filterDropdown">
                            <option value="all">Tất cả</option>
                            <option value="3">3 tháng gần đây</option>
                            <option value="6">6 tháng gần đây</option>
                            <option value="12">12 tháng gần đây</option>
                        </select>
                        <button class="refresh-btn" onclick="loadPaymentHistory()">🔄 Làm mới</button>
                    </div>
                </div>

                <!-- Hiển thị thông tin username -->
                <div class="username-info">
                    <strong>Lọc theo username:</strong> <span id="currentUsername">Đang tải...</span>
                </div>

                <div id="errorMessage" class="error-message" style="display: none;"></div>

                <div class="billing-table-container">
                    <table class="billing-table">
                        <thead>
                            <tr>
                                <th>Ngày</th>
                                <th>Mã đơn hàng</th>
                                <th>Mô tả</th>
                                <th>Số tiền</th>
                                <th>Số tài khoản</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody id="paymentTableBody">
                            <tr>
                                <td colspan="6" class="loading">Đang tải dữ liệu...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="pagination" id="pagination">
                    <!-- Pagination sẽ được tạo động -->
                </div>
            </div>
        </div>
    </main>

    <script>
        const API_URL = "/Filmpackage/GetPaymentData";
        let paymentData = [];
        let filteredData = [];
        let currentPage = 1;
        const itemsPerPage = 5; // Đã thay đổi từ 10 thành 5

        // Lấy username của người dùng hiện tại đã đăng nhập từ server
        const currentUsername = "@User.Identity.Name";

        // Load dữ liệu khi trang được tải
        document.addEventListener('DOMContentLoaded', function() {
            // Hiển thị username hiện tại
            document.getElementById('currentUsername').textContent = currentUsername;

            loadPaymentHistory();

            // Thêm event listener cho filter dropdown
            document.getElementById('filterDropdown').addEventListener('change', function() {
                filterData();
                renderTable();
            });
        });

        async function loadPaymentHistory() {
            const errorDiv = document.getElementById('errorMessage');
            const tbody = document.getElementById('paymentTableBody');

            try {
                errorDiv.style.display = 'none';
                tbody.innerHTML = '<tr><td colspan="6" class="loading">Đang tải dữ liệu...</td></tr>';

                const response = await fetch(API_URL);

                if (!response.ok) {
                    throw new Error(`HTTP Error: ${response.status}`);
                }

                const result = await response.json();

                if (result.error) {
                    throw new Error(result.message || 'Lỗi từ server');
                }

                if (!result.data || !Array.isArray(result.data)) {
                    throw new Error('Dữ liệu không hợp lệ');
                }

                // Lọc dữ liệu theo username ngay từ đầu
                paymentData = result.data.filter(item => {
                    const description = item['Mô tả'] || '';
                    return description.includes(currentUsername);
                });

                // Cập nhật thông tin gói dựa trên giao dịch mới nhất
                updateCurrentPlan();

                filterData();
                renderTable();

            } catch (error) {
                console.error('Error loading payment history:', error);
                errorDiv.textContent = `Lỗi tải dữ liệu: ${error.message}`;
                errorDiv.style.display = 'block';
                tbody.innerHTML = '<tr><td colspan="6" class="loading">Không thể tải dữ liệu</td></tr>';
            }
        }

        function updateCurrentPlan() {
            const planTypeElement = document.getElementById('currentPlanType');
            const planDetailsElement = document.getElementById('currentPlanDetails');
            const planDescriptionElement = document.getElementById('planDescription');

            if (paymentData.length === 0) {
                planTypeElement.textContent = 'Gói Free';
                planDetailsElement.textContent = 'Chưa có giao dịch thanh toán nào';
                planDescriptionElement.textContent = 'Bạn đang sử dụng gói miễn phí. Hãy nâng cấp để trải nghiệm đầy đủ tính năng.';
                return;
            }

            // Sắp xếp theo ngày mới nhất
            const sortedData = [...paymentData].sort((a, b) => {
                const dateA = new Date(a['Ngày diễn ra'] || 0);
                const dateB = new Date(b['Ngày diễn ra'] || 0);
                return dateB - dateA;
            });

            const latestPayment = sortedData[0];
            const amount = parseInt(latestPayment['Giá trị'] || 0);
            const paymentDate = new Date(latestPayment['Ngày diễn ra']);

            // Xác định loại gói dựa trên số tiền
            let planType = 'Gói Free';
            let planColor = '#2ecc71';

            if (amount >= 199000) {
                planType = 'Gói Premium';
                planColor = '#ffcc00';
            } else if (amount >= 99000) {
                planType = 'Gói Standard';
                planColor = '#3498db';
            } else if (amount > 0) {
                planType = 'Gói Basic';
                planColor = '#9b59b6';
            }

            // Tính ngày hết hạn (giả sử gói có thời hạn 1 tháng)
            const expiryDate = new Date(paymentDate);
            expiryDate.setMonth(expiryDate.getMonth() + 1);

            // Cập nhật giao diện
            planTypeElement.textContent = planType;
            planTypeElement.style.color = planColor;

            planDetailsElement.innerHTML = `
                Đã kích hoạt: ${paymentDate.toLocaleDateString('vi-VN')} |
                Hết hạn: ${expiryDate.toLocaleDateString('vi-VN')}
            `;

            const formattedAmount = amount.toLocaleString('vi-VN');
            planDescriptionElement.textContent = `Bạn đang sử dụng ${planType} với mức thanh toán gần nhất là ${formattedAmount}đ vào ngày ${paymentDate.toLocaleDateString('vi-VN')}.`;

            // Kiểm tra xem gói có hết hạn không
            const now = new Date();
            if (now > expiryDate) {
                planDetailsElement.innerHTML += ` <span style="color: #e74c3c; font-weight: bold;">⚠️ Đã hết hạn</span>`;
                planDescriptionElement.textContent += ' Gói dịch vụ của bạn đã hết hạn, vui lòng gia hạn để tiếp tục sử dụng.';
            }
        }

        function filterData() {
            const filterValue = document.getElementById('filterDropdown').value;
            const now = new Date();

            if (filterValue === 'all') {
                filteredData = [...paymentData];
            } else {
                const monthsBack = parseInt(filterValue);
                const cutoffDate = new Date(now.getFullYear(), now.getMonth() - monthsBack, now.getDate());

                filteredData = paymentData.filter(item => {
                    if (item['Ngày diễn ra']) {
                        const itemDate = new Date(item['Ngày diễn ra']);
                        return itemDate >= cutoffDate;
                    }
                    return true;
                });
            }

            currentPage = 1;
        }

        function renderTable() {
            const tbody = document.getElementById('paymentTableBody');
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);

            if (pageData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="loading">Không có giao dịch nào cho tài khoản này</td></tr>';
                renderPagination();
                return;
            }

            tbody.innerHTML = pageData.map(item => {
                const date = formatDate(item['Ngày diễn ra']);
                const orderId = item['Mã GD'] || 'N/A';
                const description = item['Mô tả'] || 'N/A';
                const amount = formatAmount(item['Giá trị']);
                const accountNo = item['Số tài khoản'] || 'N/A';

                return `
                    <tr>
                        <td>${date}</td>
                        <td>${orderId}</td>
                        <td>${description}</td>
                        <td>${amount}</td>
                        <td>${accountNo}</td>
                        <td><button class="action-btn" onclick="viewDetails('${orderId}')">Xem chi tiết</button></td>
                    </tr>
                `;
            }).join('');

            renderPagination();
        }

        function renderPagination() {
            const paginationDiv = document.getElementById('pagination');
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);

            if (totalPages <= 1) {
                paginationDiv.innerHTML = '';
                return;
            }

            let paginationHTML = '';
            const maxVisiblePages = 5; // Số trang tối đa hiển thị
            let startPage, endPage;

            if (totalPages <= maxVisiblePages) {
                // Hiển thị tất cả các trang nếu tổng số trang ít
                startPage = 1;
                endPage = totalPages;
            } else {
                // Tính toán trang bắt đầu và kết thúc để hiển thị
                const half = Math.floor(maxVisiblePages / 2);
                if (currentPage <= half + 1) {
                    startPage = 1;
                    endPage = maxVisiblePages;
                } else if (currentPage >= totalPages - half) {
                    startPage = totalPages - maxVisiblePages + 1;
                    endPage = totalPages;
                } else {
                    startPage = currentPage - half;
                    endPage = currentPage + half;
                }
            }

            // Nút Previous
            if (currentPage > 1) {
                paginationHTML += `<button onclick="changePage(${currentPage - 1})">‹</button>`;
            } else {
                paginationHTML += `<button disabled>‹</button>`;
            }

            // Nút trang đầu tiên
            if (startPage > 1) {
                paginationHTML += `<button onclick="changePage(1)">1</button>`;
                if (startPage > 2) {
                    paginationHTML += `<button disabled>...</button>`;
                }
            }

            // Các nút trang
            for (let i = startPage; i <= endPage; i++) {
                if (i === currentPage) {
                    paginationHTML += `<button class="active">${i}</button>`;
                } else {
                    paginationHTML += `<button onclick="changePage(${i})">${i}</button>`;
                }
            }

            // Nút trang cuối cùng
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<button disabled>...</button>`;
                }
                paginationHTML += `<button onclick="changePage(${totalPages})">${totalPages}</button>`;
            }

            // Nút Next
            if (currentPage < totalPages) {
                paginationHTML += `<button onclick="changePage(${currentPage + 1})">›</button>`;
            } else {
                paginationHTML += `<button disabled>›</button>`;
            }

            paginationDiv.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            renderTable();
            // Cuộn lên đầu bảng
            document.querySelector('.billing-table-container').scrollIntoView({ behavior: 'smooth' });
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';

            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('vi-VN', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
            } catch (e) {
                return dateString;
            }
        }

        function formatAmount(amount) {
            if (amount === undefined || amount === null) return 'N/A';

            // Chuyển về số nếu là string
            const numAmount = typeof amount === 'string' ?
                parseInt(amount.replace(/[^\d]/g, '')) : amount;

            if (isNaN(numAmount)) return 'N/A';

            return numAmount.toLocaleString('vi-VN') + 'đ';
        }

        function viewDetails(orderId) {
            alert(`Xem chi tiết đơn hàng: ${orderId}`);
            // Có thể thêm logic hiển thị modal hoặc chuyển trang
        }
    </script>
</body>
</html>