@model Netflixx.Models.ViewModel.BillHistoryViewModel
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CineViet - Lịch Sử Đơn Hàng & Thanh Toán</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #0f111a;
            color: #ffffff;
        }

        main {
            padding: 80px 5% 40px;
        }

        .page-title {
            text-align: center;
            margin-bottom: 50px;
        }

            .page-title h1 {
                font-size: 36px;
                margin-bottom: 15px;
            }

            .page-title p {
                font-size: 18px;
                color: #cccccc;
                max-width: 700px;
                margin: 0 auto;
            }

        .billing-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .current-plan {
            background-color: #1a1f33;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 40px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .plan-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .plan-info h2 {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .plan-type {
            font-size: 22px;
            font-weight: 600;
            color: #e50914;
        }

        .plan-details {
            color: #cccccc;
            line-height: 1.6;
        }

        .plan-actions {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

            .plan-actions button {
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: 600;
                cursor: pointer;
                font-size: 16px;
                border: none;
                transition: background-color 0.3s;
            }

        .change-plan-btn {
            background-color: #3949ab;
            color: #ffffff;
        }

            .change-plan-btn:hover {
                background-color: #303f9f;
            }

        .cancel-plan-btn {
            background-color: transparent;
            color: #cccccc;
            border: 1px solid #cccccc;
        }

            .cancel-plan-btn:hover {
                background-color: rgba(255, 255, 255, 0.1);
            }

        .history-section {
            background-color: #1a1f33;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .history-section h2 {
            font-size: 24px;
        }

        .filter-dropdown {
            padding: 8px 16px;
            background-color: #2a304a;
            color: #ffffff;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
        }

        .search-input {
            padding: 8px 16px;
            background-color: #2a304a;
            color: #ffffff;
            border: none;
            border-radius: 6px;
            margin-left: 15px;
            font-size: 16px;
        }

            .search-input::placeholder {
                color: #cccccc;
            }

            .filter-dropdown:focus {
                outline: none;
            }

        .billing-table-container {
            overflow-x: auto;
        }

        .billing-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

            .billing-table th, .billing-table td {
                padding: 15px 20px;
                text-align: left;
                border-bottom: 1px solid #2a304a;
            }

            .billing-table th {
                background-color: #161a2b;
                font-weight: 600;
                cursor: pointer;
            }

            .billing-table th.sort-asc::after {
                content: " \25B2"; /* Up arrow */
            }

            .billing-table th.sort-desc::after {
                content: " \25BC"; /* Down arrow */
            }

            .billing-table tr:nth-child(even) {
                background-color: #1e2337;
            }

        .action-btn {
            padding: 5px 10px;
            background-color: transparent;
            color: #3949ab;
            border: none;
            cursor: pointer;
            font-size: 14px;
            text-decoration: underline;
        }

            .action-btn:hover {
                color: #e50914;
            }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 30px;
            gap: 5px;
            flex-wrap: wrap;
        }

            .pagination button {
                min-width: 36px;
                height: 36px;
                border-radius: 6px;
                background-color: #2a304a;
                color: #ffffff;
                border: none;
                cursor: pointer;
                font-size: 16px;
                transition: background-color 0.3s;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0 8px;
            }

                .pagination button:hover {
                    background-color: #3949ab;
                }

                .pagination button.active {
                    background-color: #e50914;
                }

                .pagination button:disabled {
                    background-color: #1a1f33;
                    color: #666;
                    cursor: not-allowed;
                }

        .loading {
            text-align: center;
            padding: 40px;
            color: #cccccc;
        }

        .error-message {
            background-color: #dc3545;
            color: white;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            text-align: center;
        }

        .refresh-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            margin-left: 15px;
        }

            .refresh-btn:hover {
                background-color: #218838;
            }

        .username-info {
            background-color: #2a304a;
            padding: 10px 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #cccccc;
        }
    </style>
</head>
<body>
    <main>
        <div class="page-title">
            <h1>Lịch Sử Đơn Hàng & Thanh Toán</h1>
            <p>Quản lý gói dịch vụ, phương thức thanh toán và xem lịch sử thanh toán của bạn</p>
        </div>

        <div class="billing-container">
            <!-- Thông tin gói hiện tại -->
            <div class="current-plan">
                <div class="plan-header">
                    <div class="plan-info">
                        <h2>Gói dịch vụ hiện tại</h2>
                        <div class="plan-type">
                            @(Model.CurrentPackage != null ? Model.CurrentPackage.Package?.Name : "Gói Free")
                        </div>
                        <div class="plan-details">
                            @if (Model.CurrentPackage != null)
                            {
                                <text>Đã kích hoạt: @Model.CurrentPackage.StartDate.ToString("dd/MM/yyyy") | Hết hạn: @Model.CurrentPackage.EndDate.ToString("dd/MM/yyyy")</text>
                            }
                            else
                            {
                                <text>Chưa có giao dịch thanh toán nào</text>
                            }
                        </div>
                    </div>
                </div>
                <div class="plan-details">
                    @if (Model.CurrentPackage != null)
                    {
                        <p>Bạn đang sử dụng @Model.CurrentPackage.Package?.Name.</p>
                    }
                    else
                    {
                        <p>Bạn đang sử dụng gói miễn phí. Hãy nâng cấp để trải nghiệm đầy đủ tính năng.</p>
                    }
                </div>
            </div>

            <!-- Lịch sử thanh toán -->
            <div class="history-section">
                <div class="history-header">
                    <h2>Lịch sử thanh toán & mua phim</h2>
                    <div>
                        <select class="filter-dropdown" id="dateFilter">
                            <option value="all">Tất cả</option>
                            <option value="today">Hôm nay</option>
                            <option value="7">7 ngày trước</option>
                            <option value="30">30 ngày trước</option>
                        </select>
                        <select id="statusFilter" class="filter-dropdown search-input">
                            <option value="">Tất cả trạng thái</option>
                            <option value="success">Success</option>
                            <option value="failed">Failed</option>
                        </select>
                    </div>
                </div>



                <div class="billing-table-container">
                    <table class="billing-table" id="transactionTable">
                        <thead>
                            <tr>
                                <th>Ngày</th>
                                <th>Mã giao dịch</th>
                                <th>Trạng thái</th>
                                <th>Số tiền</th>
                                <th>Nhà cung cấp</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.History.Any())
                            {
                                foreach (var h in Model.History)
                                {
                                    <tr>
                                        <td>@h.Date.ToString("dd/MM/yyyy")</td>
                                        <td>@h.Description</td>
                                        <td>@h.Status</td>
                                        <td>@h.AmountText</td>
                                        <td>@h.Provider</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="loading">Không có giao dịch nào cho tài khoản này</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="pagination">
                    <!-- Pagination placeholder -->
                </div>
            </div>

        </div>
    </main>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const statusFilter = document.getElementById('statusFilter');
            const dateFilter = document.getElementById('dateFilter');
            const rows = Array.from(document.querySelectorAll('#transactionTable tbody tr'));
            const headers = document.querySelectorAll('#transactionTable th');

            function sortRows(index, order) {
                const tbody = document.querySelector('#transactionTable tbody');
                const sorted = rows.slice().sort((a, b) => {
                    const aText = a.cells[index].textContent.trim();
                    const bText = b.cells[index].textContent.trim();

                    if (index === 0) {
                        const [da, ma, ya] = aText.split('/');
                        const [db, mb, yb] = bText.split('/');
                        const dateA = new Date(ya, ma - 1, da);
                        const dateB = new Date(yb, mb - 1, db);
                        return dateA - dateB;
                    }

                    return aText.localeCompare(bText);
                });

                if (order === 'desc') sorted.reverse();

                tbody.innerHTML = '';
                sorted.forEach(r => tbody.appendChild(r));
            }

            function filterRows() {
                const statusValue = statusFilter.value.toLowerCase();
                const range = dateFilter.value;
                const now = new Date();

                rows.forEach(r => {
                    const dateText = r.cells[0].textContent.trim();
                    const statusText = r.cells[2].textContent.toLowerCase();

                    const [day, month, year] = dateText.split('/');
                    const rowDate = new Date(year, month - 1, day);

                    let show = true;
                    if (range === 'today') {
                        show = rowDate.toDateString() === now.toDateString();
                    } else if (range === '7') {
                        show = now - rowDate <= 7 * 24 * 60 * 60 * 1000;
                    } else if (range === '30') {
                        show = now - rowDate <= 30 * 24 * 60 * 60 * 1000;
                    }

                    if (show && statusValue) {
                        show = statusText === statusValue;
                    }

                    r.style.display = show ? '' : 'none';
                });
            }

            headers.forEach((h, i) => {
                h.addEventListener('click', () => {
                    const current = h.dataset.order === 'asc' ? 'desc' : 'asc';
                    headers.forEach(head => head.classList.remove('sort-asc', 'sort-desc'));
                    h.dataset.order = current;
                    h.classList.add(current === 'asc' ? 'sort-asc' : 'sort-desc');
                    sortRows(i, current);
                    filterRows();
                });
            });

            if (statusFilter) statusFilter.addEventListener('change', filterRows);
            if (dateFilter) dateFilter.addEventListener('change', filterRows);

            filterRows();
        });
    </script>
</body>
</html>
