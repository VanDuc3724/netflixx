@model IEnumerable<Netflixx.Models.BlogPost>
<link rel="stylesheet" href="/css/blog.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
@using Netflixx.Models
@{
    ViewData["Title"] = "Blog";
    int currentPage = ViewBag.CurrentPage ?? 1;
}

<div class="container-fluid netflix-bg">
    <div class="blog-index-container">
        <!-- Filter Section -->
        <div class="blog-filter-section">
            <form method="get" asp-action="Index" class="row g-2 align-items-end">
                <input type="hidden" name="page" value="1" />
                <input type="hidden" name="myPosts" value="@ViewBag.MyPosts" />
                <input type="hidden" name="showDrafts" value="@ViewBag.ShowDrafts" />
                
                <div class="col-md-4">
                    <label class="form-label text-light">Tìm kiếm</label>
                    <input type="text" name="searchTerm" class="form-control" 
                           placeholder="Search for movie name or post title..." 
                           value="@ViewBag.SearchTerm">
                </div>
                
                <div class="col-md-2">
                    <label class="form-label text-light">Thời gian</label>
                    <select name="dateFilter" class="form-select">
                        <option value="all" selected="@(ViewBag.DateFilter == "all")">Tất cả</option>
                        <option value="today" selected="@(ViewBag.DateFilter == "today")">Hôm nay</option>
                        <option value="week" selected="@(ViewBag.DateFilter == "week")">Tuần này</option>
                        <option value="month" selected="@(ViewBag.DateFilter == "month")">Tháng này</option>
                        <option value="year" selected="@(ViewBag.DateFilter == "year")">Năm nay</option>
                    </select>
                </div>
                
                <div class="col-md-2">
                    <label class="form-label text-light">Sắp xếp</label>
                    <select name="sortBy" class="form-select">
                        <option value="date_desc" selected="@(ViewBag.SortBy == "date_desc")">Mới nhất</option>
                        <option value="date_asc" selected="@(ViewBag.SortBy == "date_asc")">Cũ nhất</option>
                        <option value="title_asc" selected="@(ViewBag.SortBy == "title_asc")">A → Z</option>
                        <option value="title_desc" selected="@(ViewBag.SortBy == "title_desc")">Z → A</option>
                        <option value="like_desc" selected="@(ViewBag.SortBy == "like_desc")">Nhiều Like nhất</option>
                        <option value="dislike_desc" selected="@(ViewBag.SortBy == "dislike_desc")">Nhiều Dislike nhất</option>
                    </select>
                </div>
                
                <div class="col-md-9 d-flex gap-2 align-items-end">
                    <a href="@Url.Action("Index")" class="btn btn-info">
                        <i class="bi bi-list-ul"></i> Tất cả
                    </a>
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-funnel"></i> Áp dụng
                    </button>
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-counterclockwise"></i> Đặt lại
                    </a>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a asp-action="Create" class="btn btn-success">
                            <i class="bi bi-plus-circle"></i> Tạo bài viết
                        </a>
                        <a href="@Url.Action("Index", new { myPosts = true, page = 1 })" class="btn btn-primary">
                            <i class="bi bi-collection"></i> Bài viết của tôi
                        </a>
                        <a href="@Url.Action("Index", new { showDrafts = true, page = 1 })" class="btn btn-warning">
                            <i class="bi bi-file-earmark"></i> Bản nháp
                        </a>
                    }
                </div>
            </form>
        </div>
          @* @await Component.InvokeAsync("Chat") *@
        @if (ViewBag.TotalPosts > 0)
        {
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="text-light mb-0">@ViewBag.TotalPosts Bài viết</h5>
                <div class="text-muted">
                    Trang @currentPage/@ViewBag.TotalPages
                </div>
            </div>
        }

        @if (Model.Any())
        {
            <div class="blog-grid">
                @foreach (var item in Model)
                {
                    <div class="netflix-card">
                        <div class="card-thumbnail"
                             style="background-image: url('@(item.Film?.FilmURL ?? "/images/default-blog.jpg")')">
                            <div class="card-overlay">
                                <h5 class="blog-post-title">@item.Title</h5>
                                @if (item.Film != null)
                                {
                                    <p class="blog-film-title">@item.Film.Title</p>
                                }
                                <div class="blog-post-meta">
                                    <!-- Hiển thị badge Draft -->
                                    @if (item.Status == BlogPostStatus.Draft)
                                    {
                                        <span class="badge bg-warning">Bản nháp</span>
                                    }
                                    <span><i class="bi bi-calendar3"></i> @item.CreatedDate.ToString("dd/MM/yyyy")</span>
                                    @if (item.Author != null)
                                    {
                                        <span><i class="bi bi-person"></i> @item.Author.UserName</span>
                                    }
                                </div>
                                <div class="blog-post-actions">
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-card-action btn-view">
                                        <strong>Xem</strong>
                                    </a>
                                    @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Manager") || item.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value))
                                    {
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-card-action btn-edit" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-card-action btn-delete" title="Delete">
                                            <i class="bi bi-trash"></i>
                                        </a>
        
                                        @if (item.Status == BlogPostStatus.Published)
                                        {
                                            <!-- Kiểm tra ViewBag.ShowDrafts có null không -->
                                            @if (!(ViewBag.ShowDrafts as bool? ?? false))
                                            {
                                                <form asp-action="SetAsDraft" method="post" style="display: inline;">
                                                    <input type="hidden" name="id" value="@item.Id" />
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-card-action btn-draft" title="Save as Draft">
                                                        <i class="bi bi-save"></i>
                                                    </button>
                                                </form>
                                            }
                                        }
                                        else if (item.Status == BlogPostStatus.Draft)
                                        {
                                            <!-- Luôn hiển thị nút Publish cho bài Draft -->
                                            <form asp-action="Publish" method="post" style="display: inline;">
                                                <input type="hidden" name="id" value="@item.Id" />
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-card-action btn-publish" title="Publish">
                                                    <i class="bi bi-upload"></i>
                                                </button>
                                            </form>
                                        }
                                    } else
                                        {
                                            <!-- Hiển thị nút like/dislike cho người không phải tác giả/admin/manager -->
                                            @if (User.Identity.IsAuthenticated)
                                            {
                                                <button class="btn-like btn btn-sm @(item.CurrentUserVote == true ? "btn-success" : "btn-outline-success")"
                                                        data-blog-id="@item.Id" title="Like">
                                                    <i class="bi bi-hand-thumbs-up"></i> <span class="like-count">@item.LikeCount</span>
                                                </button>
                                                <button class="btn-dislike btn btn-sm @(item.CurrentUserVote == false ? "btn-danger" : "btn-outline-danger")"
                                                        data-blog-id="@item.Id" title="Dislike">
                                                    <i class="bi bi-hand-thumbs-down"></i> <span class="dislike-count">@item.DislikeCount</span>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn-like btn btn-sm @(item.CurrentUserVote == true ? "btn-success" : "btn-outline-success")"
                                                        disabled title="Please login to like/dislike">
                                                    <i class="bi bi-hand-thumbs-up"></i> <span class="like-count">@item.LikeCount</span>
                                                </button>
                                                <button class="btn-dislike btn btn-sm @(item.CurrentUserVote == false ? "btn-danger" : "btn-outline-danger")"
                                                        disabled title="Please login to like/dislike">
                                                    <i class="bi bi-hand-thumbs-down"></i> <span class="dislike-count">@item.DislikeCount</span>
                                                </button>
                                            }
                                        }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <div class="pagination-container">
                    @if (ViewBag.HasPreviousPage)
                    {
                        <a class="btn btn-outline-secondary" asp-action="Index" 
                           asp-route-page="1"
                           asp-route-searchTerm="@ViewBag.SearchTerm"
                           asp-route-dateFilter="@ViewBag.DateFilter"
                           asp-route-sortBy="@ViewBag.SortBy"
                           asp-route-myPosts="@ViewBag.MyPosts"
                           asp-route-showDrafts="@ViewBag.ShowDrafts">
                            <i class="bi bi-chevron-double-left"></i>
                        </a>
                        
                        <a class="btn btn-outline-secondary" asp-action="Index" 
                           asp-route-page="@(currentPage - 1)"
                           asp-route-searchTerm="@ViewBag.SearchTerm"
                           asp-route-dateFilter="@ViewBag.DateFilter"
                           asp-route-sortBy="@ViewBag.SortBy"
                           asp-route-myPosts="@ViewBag.MyPosts"
                           asp-route-showDrafts="@ViewBag.ShowDrafts">
                            <i class="bi bi-chevron-left"></i>
                        </a>
                    }

                    <div class="pagination-info">
                        Trang @currentPage / @ViewBag.TotalPages
                    </div>

                    @if (ViewBag.HasNextPage)
                    {
                        <a class="btn btn-outline-secondary" asp-action="Index" 
                           asp-route-page="@(currentPage + 1)"
                           asp-route-searchTerm="@ViewBag.SearchTerm"
                           asp-route-dateFilter="@ViewBag.DateFilter"
                           asp-route-sortBy="@ViewBag.SortBy"
                           asp-route-myPosts="@ViewBag.MyPosts"
                           asp-route-showDrafts="@ViewBag.ShowDrafts">
                            <i class="bi bi-chevron-right"></i>
                        </a>
                        
                        <a class="btn btn-outline-secondary" asp-action="Index" 
                           asp-route-page="@ViewBag.TotalPages"
                           asp-route-searchTerm="@ViewBag.SearchTerm"
                           asp-route-dateFilter="@ViewBag.DateFilter"
                           asp-route-sortBy="@ViewBag.SortBy"
                           asp-route-myPosts="@ViewBag.MyPosts"
                           asp-route-showDrafts="@ViewBag.ShowDrafts">
                            <i class="bi bi-chevron-double-right"></i>
                        </a>
                    }

                    <form method="get" class="page-jump-form" asp-action="Index">
                        <input type="hidden" name="searchTerm" value="@ViewBag.SearchTerm" />
                        <input type="hidden" name="dateFilter" value="@ViewBag.DateFilter" />
                        <input type="hidden" name="sortBy" value="@ViewBag.SortBy" />
                        <input type="hidden" name="myPosts" value="@ViewBag.MyPosts" />
                        <input type="hidden" name="showDrafts" value="@ViewBag.ShowDrafts" />
                        
                        <span>Đến trang:</span>
                        <input type="number" name="page" class="page-jump-input" 
                               min="1" max="@ViewBag.TotalPages" value="@currentPage" />
                        <button type="submit" class="page-jump-button">Đi</button>
                    </form>
                </div>
            }
        }
        else
        {
            <div class="text-center py-5">
                <div class="alert alert-dark" role="alert">
                    <h4 class="alert-heading">Không tìm thấy bài viết</h4>
                    <p>
                        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm))
                        {
                            <span>Không có bài viết nào liên quan đến "<strong>@ViewBag.SearchTerm</strong>"</span>
                        }
                        else if (ViewBag.MyPosts)
                        {
                            <span>Bạn chưa có bài viết nào</span>
                        }
                        else if (ViewBag.ShowDrafts)
                        {
                            <span>Bạn chưa có bản nháp nào</span>
                        }
                        else
                        {
                            <span>Chưa có bài viết nào</span>
                        }
                    </p>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <hr>
                        <a asp-action="Create" class="btn btn-success mt-2">
                            <i class="bi bi-plus-circle"></i> Tạo bài viết mới
                        </a>
                        @if (ViewBag.MyPosts)
                        {
                            <a href="@Url.Action("Index")" class="btn btn-primary mt-2">
                                <i class="bi bi-arrow-left"></i> Tất cả bài viết
                            </a>
                        }
                        @if (ViewBag.ShowDrafts)
                        {
                            <a href="@Url.Action("Index")" class="btn btn-primary mt-2">
                                <i class="bi bi-arrow-left"></i> Tất cả bài viết
                            </a>
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>
@section Scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Xử lý sự kiện khi người dùng nhập số trang không hợp lệ
        const pageJumpInput = document.querySelector('.page-jump-input');
        if (pageJumpInput) {
            pageJumpInput.addEventListener('change', function() {
                const maxPage = parseInt(this.max);
                const minPage = parseInt(this.min);
                let value = parseInt(this.value);
                
                if (isNaN(value)) {
                    this.value = minPage;
                } else if (value < minPage) {
                    this.value = minPage;
                } else if (value > maxPage) {
                    this.value = maxPage;
                }
            });
        }
        
        // Xử lý sắp xếp
        const sortSelect = document.querySelector('select[name="sortBy"]');
        const sortOrderInput = document.getElementById('sortOrderValue');
        
        if (sortSelect && sortOrderInput) {
            sortSelect.addEventListener('change', function() {
                if (this.value === 'title') {
                    const currentValue = sortOrderInput.value;
                    sortOrderInput.value = currentValue === 'asc' ? 'desc' : 'asc';
                } else {
                    sortOrderInput.value = 'desc';
                }
            });
        }
    });

    $(document).ready(function() {
        // Like/Dislike functionality - optimized for instant update
        $(document).on('click', '.btn-like, .btn-dislike', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const button = $(this);
            if (button.hasClass('disabled')) return;
            
            const blogPostId = button.data('blog-id');
            const isLikeButton = button.hasClass('btn-like');
            const card = button.closest('.netflix-card');
            
            // Get current counts
            let likeCount = parseInt(card.find('.like-count').text()) || 0;
            let dislikeCount = parseInt(card.find('.dislike-count').text()) || 0;
            
            // Optimistic UI update - update immediately while waiting for server response
            if (isLikeButton) {
                if (button.hasClass('btn-outline-success')) {
                    // Adding like
                    likeCount++;
                    if (card.find('.btn-dislike').hasClass('btn-danger')) {
                        // If previously disliked, remove that dislike
                        dislikeCount--;
                        card.find('.btn-dislike').removeClass('btn-danger').addClass('btn-outline-danger');
                    }
                    button.removeClass('btn-outline-success').addClass('btn-success');
                } else {
                    // Removing like
                    likeCount--;
                    button.removeClass('btn-success').addClass('btn-outline-success');
                }
            } else {
                if (button.hasClass('btn-outline-danger')) {
                    // Adding dislike
                    dislikeCount++;
                    if (card.find('.btn-like').hasClass('btn-success')) {
                        // If previously liked, remove that like
                        likeCount--;
                        card.find('.btn-like').removeClass('btn-success').addClass('btn-outline-success');
                    }
                    button.removeClass('btn-outline-danger').addClass('btn-danger');
                } else {
                    // Removing dislike
                    dislikeCount--;
                    button.removeClass('btn-danger').addClass('btn-outline-danger');
                }
            }
            
            // Update counts immediately
            card.find('.like-count').text(likeCount);
            card.find('.dislike-count').text(dislikeCount);
            
            // Disable button during request
            button.addClass('disabled');
            const originalHtml = button.html();
            button.html('<i class="bi bi-arrow-repeat spinner"></i>');
            
            // Send request to server
            $.ajax({
                url: '@Url.Action("ToggleLike", "Blog")',
                type: 'POST',
                data: {
                    blogPostId: blogPostId,
                    isLike: isLikeButton
                },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (!response.success) {
                        // Revert changes if server failed
                        card.find('.like-count').text(response.likeCount);
                        card.find('.dislike-count').text(response.dislikeCount);
                        
                        // Reset button states based on server response
                        const likeButton = card.find('.btn-like');
                        const dislikeButton = card.find('.btn-dislike');
                        
                        likeButton.removeClass('btn-success btn-outline-success')
                                 .addClass(response.currentUserVote === true ? 'btn-success' : 'btn-outline-success');
                                 
                        dislikeButton.removeClass('btn-danger btn-outline-danger')
                                   .addClass(response.currentUserVote === false ? 'btn-danger' : 'btn-outline-danger');
                    }
                },
                error: function() {
                    // Revert to original counts on error
                    card.find('.like-count').text(likeCount + (isLikeButton ? -1 : 0));
                    card.find('.dislike-count').text(dislikeCount + (isLikeButton ? 0 : -1));
                    alert('Failed to update vote. Please try again.');
                },
                complete: function() {
                    button.html(originalHtml);
                    button.removeClass('disabled');
                }
            });
        });
    });
    </script>
}