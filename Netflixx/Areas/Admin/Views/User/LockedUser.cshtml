@{
    ViewData["Title"] = "Quản lý Người dùng bị Khóa";
    Layout = "_AdminLayout";
}
@Html.AntiForgeryToken()

<!-- CSS (Giữ nguyên) -->
<style>
    /* 1. THANH BỘ LỌC */
    .filter-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: flex-end;
        gap: 24px;
        padding: 16px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        margin-bottom: 1.5rem;
    }

    .filter-inputs {
        display: flex;
        gap: 16px;
        flex-grow: 1;
        align-items: flex-end;
    }

    .filter-item {
        display: flex;
        flex-direction: column;
        gap: 6px;
        flex: 1 1 auto;
    }

        .filter-item label {
            font-size: 13px;
            font-weight: 500;
            color: #495057;
            white-space: nowrap;
        }

    .filter-actions {
        display: flex;
        gap: 8px;
        flex-shrink: 0;
    }

    .filter-item.search-box {
        position: relative;
        flex-grow: 1.5;
    }

        .filter-item.search-box .icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            width: 16px;
            height: 16px;
            stroke: #6c757d;
            stroke-width: 2px;
            fill: none;
        }

        .filter-item.search-box input {
            padding-left: 38px !important;
        }

    /* 2. CÁC STYLE KHÁC */
    .action-icon.unlock {
        color: #28a745;
    }

        .action-icon.unlock:hover {
            background-color: rgba(40, 167, 69, 0.1);
        }

    .action-icon.detail {
        color: #0d6efd;
    }

        .action-icon.detail:hover {
            background-color: rgba(13, 110, 253, 0.1);
        }

    .user-avatar-table {
        height: 32px;
        width: 32px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 8px;
    }

    /* THÊM MỚI: CSS cho Overlay và Modal Chi tiết */
    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        z-index: 1040; /* Dưới modal, trên mọi thứ khác */
        display: none;
        align-items: center;
        justify-content: center;
    }

    .modal-container-wrapper {
        z-index: 1051; /* Trên overlay */
        display: none;
    }
</style>

<div>
    <!-- Header -->
    <div class="header-green">
        <div class="left">
            <div class="breadcrumb">Netflixx > Quản lý người dùng > Người dùng bị khóa</div>
            <div class="title">Quản lý Người dùng bị Khóa</div>
        </div>
    </div>

    <!-- Card chứa bộ lọc và bảng dữ liệu -->
    <div class="card">
        <!-- Bộ lọc (Giữ nguyên cấu trúc HTML) -->
        <div class="filter-toolbar" id="filter-toolbar">
            <div class="filter-inputs">
                <div class="filter-item search-box">
                    <svg class="icon" viewBox="0 0 24 24"><path d="M21 20l-5.9-5.9A7 7 0 1 0 4 10a7 7 0 0 0 11.1 5.1L20 21z" /></svg>
                    <input type="text" placeholder="Tìm kiếm theo tên, email..." id="searchInput" class="form-control form-control-sm">
                </div>
                <div class="filter-item">
                    <label for="filterLockDateStart">Khóa từ ngày</label>
                    <input type="date" id="filterLockDateStart" class="form-control form-control-sm">
                </div>
                <div class="filter-item">
                    <label for="filterLockDateEnd">Đến ngày</label>
                    <input type="date" id="filterLockDateEnd" class="form-control form-control-sm">
                </div>
                <div class="filter-item">
                    <label for="filterRole">Vai trò</label>
                    <select id="filterRole" class="form-select form-select-sm">
                        <option value="">Tất cả vai trò</option>
                        <option value="Admin">Admin</option>
                        <option value="User">User</option>
                    </select>
                </div>
            </div>
            <div class="filter-actions">
                <button id="applyFiltersBtn" class="btn btn-primary btn-sm">Áp dụng</button>
                <button id="clearFiltersBtn" class="btn btn-secondary btn-sm">Xóa bộ lọc</button>
            </div>
        </div>

        <!-- Thanh hành động hàng loạt -->
        <div id="bulkActionToolbar" class="bulk-action-toolbar" style="display: none;">
            <span id="selectionCount" style="font-weight: bold;"></span>
            <button id="bulkUnlockButton" class="btn btn-success btn-sm">Mở Khóa Tài Khoản Đã Chọn</button>
        </div>

        <!-- Điều khiển số dòng/trang -->
        <div class="table-controls-top">
            <label for="itemsPerPageSelect">Hiển thị:</label>
            <select id="itemsPerPageSelect" class="form-select form-select-sm" style="width: auto;">
                <option value="10" selected>10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </div>

        <!-- Bảng dữ liệu -->
        <div class="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <th style="width: 1%;"><input type="checkbox" id="selectAllCheckbox" title="Chọn tất cả" /></th>
                        <th>Họ và Tên</th>
                        <th>Email</th>
                        <th>Vai trò</th>
                        <th>Ngày Bị Khóa</th>
                        <th class="text-center">Hành động</th>
                    </tr>
                </thead>
                <tbody id="lockedUserTableBody"></tbody>
            </table>
        </div>

        <!-- Phân trang -->
        <div class="table-footer">
            <div id="paginationInfo">Hiển thị 0-0 trên 0 người dùng</div>
            <div class="pagination" id="pagination"></div>
        </div>
    </div>
</div>

<div id="overlay" class="overlay" style="display: none;">
    @* Container cho form thêm người dùng (bạn đã có) *@
    <div id="addUserFormContainer" class="popup-form-container" style="display:none;">
        @* Nội dung form thêm user sẽ được load vào đây *@
    </div>

    @* !! THÊM HOẶC KIỂM TRA PHẦN NÀY !! *@
    <div id="userDetailModalContainer" class="popup-form-container" style="display:none;">
        @* Nội dung modal chi tiết người dùng sẽ được load vào đây *@
    </div>
</div>
<div class="modal fade" id="adminPasswordConfirmModal" tabindex="-1"
     aria-labelledby="adminPasswordConfirmModalLabel" aria-hidden="true" data-bs-backdrop="static"
     data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="adminPasswordConfirmModalLabel">Xác nhận mật khẩu Admin</h5>
            </div>
            <div class="modal-body">
                <p>Vui lòng nhập mật khẩu quản trị viên của bạn để hoàn tất việc thêm người dùng.</p>
                <div class="Add-user-form-group form-floating">
                    <input type="password" id="adminPasswordInput" class="form-control" placeholder=" " />
                    <label for="adminPasswordInput">Mật khẩu Admin</label>
                    <div id="adminPasswordError" class="add-user-error-message"></div>
                </div>
            </div>
            <a href="/Account/ChangePassword">Quên mật khẩu?</a>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelAdminConfirmBtn"
                        data-bs-dismiss="modal">
                    Hủy
                </button>
                <button type="button" class="btn btn-primary" id="submitAdminConfirmBtn">Xác nhận</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="~/js/user-manager/adminAuth.js" asp-append-version="true"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // === DOM Elements & State ===
            const userTableBody = document.getElementById('lockedUserTableBody');
            const paginationElement = document.getElementById('pagination');
            const paginationInfo = document.getElementById('paginationInfo');
            const itemsPerPageSelect = document.getElementById('itemsPerPageSelect');
            const searchInput = document.getElementById('searchInput');
            const applyFiltersBtn = document.getElementById('applyFiltersBtn');
            const clearFiltersBtn = document.getElementById('clearFiltersBtn');
            const selectAllCheckbox = document.getElementById('selectAllCheckbox');
            const bulkActionToolbar = document.getElementById('bulkActionToolbar');
            const selectionCount = document.getElementById('selectionCount');
            const bulkUnlockButton = document.getElementById('bulkUnlockButton');

            // THÊM MỚI: Các element cho modal chi tiết
            const overlay = document.getElementById('overlay');
            const userDetailModalContainer = document.getElementById('userDetailModalContainer');

            let currentPage = 1;
            let itemsPerPage = parseInt(itemsPerPageSelect.value, 10);
            let selectedUserIds = new Set();
            const DEFAULT_AVATAR_URL = '/img/avatar/default/default-avatar.png';

            // === Core Functions ===
            async function fetchJson(url, options = {}) {
                try {
                    const resp = await fetch(url, options);
                    if (!resp.ok) {
                        const errorData = await resp.json().catch(() => ({ message: resp.statusText }));
                        throw new Error(errorData.message || `Lỗi HTTP ${resp.status}`);
                    }
                    return resp.json();
                } catch (err) {
                    console.error('Fetch Error:', err);
                    Swal.fire('Lỗi', `Không thể kết nối tới server: ${err.message}`, 'error');
                    return null;
                }
            }

            function getFilterValues() {
                return {
                    search: searchInput.value.trim(),
                    lockDateStart: document.getElementById('filterLockDateStart').value,
                    lockDateEnd: document.getElementById('filterLockDateEnd').value,
                    role: document.getElementById('filterRole').value
                };
            }

            async function loadLockedUsersTable(page = 1) {
                currentPage = page;
                const filters = getFilterValues();
                let apiUrl = `/Admin/User/GetLockedUsers?page=${page}&pagesize=${itemsPerPage}`;

                Object.keys(filters).forEach(key => {
                    if (filters[key]) {
                        apiUrl += `&${key}=${encodeURIComponent(filters[key])}`;
                    }
                });

                const data = await fetchJson(apiUrl);
                userTableBody.innerHTML = '';
                if (!data || !data.items) {
                    userTableBody.innerHTML = `<tr><td colspan="6" class="text-center p-5 text-danger">Có lỗi khi tải dữ liệu.</td></tr>`;
                    updatePagination(1, 0, 0, 0);
                    return;
                }

                if (data.items.length === 0) {
                    userTableBody.innerHTML = `<tr><td colspan="6" class="text-center p-5">Không tìm thấy người dùng bị khóa nào phù hợp.</td></tr>`;
                } else {
                    data.items.forEach(user => {
                        const isChecked = selectedUserIds.has(user.id);
                        const row = userTableBody.insertRow();
                        // <--- SỬA LỖI & THAY ĐỔI: Thêm nút "Mở khóa", "Chi tiết" và checkbox được đồng bộ
                        row.innerHTML = `
                            <td><input type="checkbox" class="user-checkbox" data-user-id="${user.id}" ${isChecked ? 'checked' : ''}></td>
                            <td><div class="d-flex align-items-center"><img src="${user.avatarUrl || DEFAULT_AVATAR_URL}" class="user-avatar-table" alt="Avatar" onerror="this.src='${DEFAULT_AVATAR_URL}'"><span class="ms-2">${user.fullName}</span></div></td>
                            <td>${user.email}</td>
                            <td>${user.role}</td>
                            <td>${user.lockDate}</td>
                            <td class="text-center">
                                <button class="action-icon detail" title="Chi tiết" data-user-id="${user.id}">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="24" height="24">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 20h9"/><path stroke-linecap="round" stroke-linejoin="round" d="M16.5 3.5a2.121 2.121 0 113 3L7 19l-4 1 1-4L16.5 3.5z"/>
                                    </svg>
                                </button>
                            </td>`;
                    });
                }
                updatePagination(data.page, data.totalPage, data.totalCount, data.items.length);
                updateBulkActionUI();
            }

            // <--- THÊM MỚI: Logic Mở Khóa (kết hợp với adminAuth.js) --->
            async function executeUnlock(userIds) {
                 const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const response = await fetchJson('/Admin/User/BulkUnlockUsers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': csrfToken
                    },
                    body: JSON.stringify(userIds)
                });

                if(response && response.success){
                    await Swal.fire('Thành công!', response.message, 'success');
                    selectedUserIds.clear(); // Xóa lựa chọn sau khi thành công
                    loadLockedUsersTable(currentPage); // Tải lại trang hiện tại
                } else {
                    await Swal.fire('Thất bại!', response?.message || 'Có lỗi xảy ra, vui lòng thử lại.', 'error');
                }
            }

            // <--- THÊM MỚI: Toàn bộ logic để mở Modal Chi tiết Người dùng (lấy từ a.js) --->
            async function openDetailUserModal(userId) {
                const clickedButton = document.querySelector(`.detail[data-user-id="${userId}"]`);
                if (clickedButton) clickedButton.disabled = true;

                try {
                    const response = await fetch(`/Admin/User/OpenDetail`);
                    if (!response.ok) throw new Error(`Lỗi HTTP ${response.status}: ${await response.text()}`);
                    const htmlContent = await response.text();

                    if (!htmlContent.trim()) throw new Error("HTML nhận được từ server rỗng.");

                    userDetailModalContainer.innerHTML = htmlContent;

                    const existingScript = document.querySelector('script#userDetailModalScript');
                    if (existingScript) existingScript.remove();

                    const script = document.createElement('script');
                    script.src = "/js/user-manager/UserDetail.js";
                    script.id = 'userDetailModalScript';
                    script.onload = () => {
                        if (typeof window.initAndOpenUserDetailModal === 'function') {
                            overlay.style.display = 'flex';
                            userDetailModalContainer.style.display = 'block';
                            document.body.style.overflow = 'hidden';

                            window.initAndOpenUserDetailModal(userId, () => {
                                // Callback này sẽ được gọi khi modal đóng
                                userDetailModalContainer.innerHTML = '';
                                userDetailModalContainer.style.display = 'none';
                                const scriptToRemove = document.querySelector('script#userDetailModalScript');
                                if (scriptToRemove) scriptToRemove.remove();
                                overlay.style.display = 'none';
                                document.body.style.overflow = '';
                            });
                        } else {
                           console.error('Lỗi: Hàm initAndOpenUserDetailModal không tìm thấy trong UserDetail.js.');
                           alert('Không thể khởi tạo modal chi tiết người dùng.');
                        }
                        if (clickedButton) clickedButton.disabled = false;
                    };
                    script.onerror = () => {
                        console.error('Lỗi nghiêm trọng khi tải UserDetail.js');
                        alert('Không thể tải script cho chi tiết người dùng.');
                        if (clickedButton) clickedButton.disabled = false;
                    };
                    document.body.appendChild(script);
                } catch (error) {
                    console.error('Lỗi trong openDetailUserModal:', error);
                    alert(`Không thể mở modal: ${error.message}`);
                    if (clickedButton) clickedButton.disabled = false;
                }
            }
             window.closeDetailUserModal = function () {
                if (typeof window.requestCloseDetailModal === 'function') {
                    window.requestCloseDetailModal();
                } else {
                    userDetailModalContainer.innerHTML = '';
                    userDetailModalContainer.style.display = 'none';
                    const scriptToRemove = document.querySelector('script#userDetailModalScript');
                    if (scriptToRemove) scriptToRemove.remove();
                    overlay.style.display = 'none';
                    document.body.style.overflow = '';
                }
            };

            // === Event Listeners ===
            applyFiltersBtn.addEventListener('click', () => loadLockedUsersTable(1));

            // SỬA LỖI: Clear filter sẽ reset các input và tải lại trang 1
            clearFiltersBtn.addEventListener('click', () => {
                document.querySelectorAll('.filter-inputs input, .filter-inputs select').forEach(el => {
                    if (el.type === 'checkbox' || el.type === 'radio') el.checked = false;
                    else el.value = '';
                });
                loadLockedUsersTable(1);
            });

            itemsPerPageSelect.addEventListener('change', e => {
                itemsPerPage = parseInt(e.target.value, 10);
                loadLockedUsersTable(1);
            });

            // SỬA & TỐI ƯU: Sử dụng event delegation cho toàn bộ bảng
            userTableBody.addEventListener('click', e => {
                const unlockBtn = e.target.closest('.unlock');
                const detailBtn = e.target.closest('.detail');

                if (unlockBtn) {
                    const userId = unlockBtn.dataset.userId;
                    const userName = unlockBtn.dataset.userName;
                    Swal.fire({
                        title: `Mở khóa tài khoản?`,
                        text: `Bạn có chắc muốn mở khóa cho người dùng "${userName}"?`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonText: 'Đồng ý, Mở khóa!',
                        cancelButtonText: 'Hủy',
                        confirmButtonColor: '#28a745',
                    }).then(result => {
                        if (result.isConfirmed) {
                            // Gọi hàm xác thực trước khi thực hiện hành động
                            window.executeSensitiveAction(() => executeUnlock([userId]));
                        }
                    });
                } else if (detailBtn) {
                    const userId = detailBtn.dataset.userId;
                    openDetailUserModal(userId);
                }
            });

            // Logic chọn/bỏ chọn (lấy từ a.js)
            userTableBody.addEventListener('change', e => {
                if (e.target.matches('.user-checkbox')) {
                    const userId = e.target.dataset.userId;
                    if (e.target.checked) selectedUserIds.add(userId);
                    else selectedUserIds.delete(userId);
                    updateBulkActionUI();
                }
            });

            selectAllCheckbox.addEventListener('change', e => {
                 document.querySelectorAll('.user-checkbox').forEach(cb => {
                    cb.checked = e.target.checked;
                    const userId = cb.dataset.userId;
                    if(e.target.checked) selectedUserIds.add(userId);
                    else selectedUserIds.delete(userId);
                 });
                 updateBulkActionUI();
            });

            bulkUnlockButton.addEventListener('click', () => {
                if (selectedUserIds.size === 0) {
                    Swal.fire('Chưa chọn', 'Vui lòng chọn ít nhất một tài khoản để mở khóa.', 'warning');
                    return;
                };
                Swal.fire({
                    title: `Mở khóa ${selectedUserIds.size} tài khoản?`,
                    text: 'Hành động này sẽ mở khóa tất cả tài khoản đã chọn.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Đồng ý',
                    cancelButtonText: 'Hủy',
                    confirmButtonColor: '#28a745',
                }).then(result => {
                    if (result.isConfirmed) {
                        // Gọi hàm xác thực trước khi thực hiện hành động
                        window.executeSensitiveAction(() => executeUnlock(Array.from(selectedUserIds)));
                    }
                });
            });

            overlay.addEventListener('click', (e) => {
                if (e.target.id === 'overlay') {
                    if (userDetailModalContainer && userDetailModalContainer.style.display !== 'none') {
                       window.closeDetailUserModal();
                    }
                }
            });

            // THÊM MỚI: Lắng nghe sự kiện người dùng được cập nhật từ modal chi tiết
            document.addEventListener('userUpdated', () => {
                loadLockedUsersTable(currentPage); // Tải lại bảng để cập nhật thông tin
            });


            // === UI Update Functions (lấy từ a.js và điều chỉnh) ===
            function updateBulkActionUI() {
                const numSelected = selectedUserIds.size;
                if (numSelected > 0) {
                    selectionCount.textContent = `${numSelected} tài khoản đã được chọn.`;
                    bulkActionToolbar.style.display = 'flex';
                } else {
                    bulkActionToolbar.style.display = 'none';
                }
                const rowCheckboxes = userTableBody.querySelectorAll('.user-checkbox');
                selectAllCheckbox.checked = rowCheckboxes.length > 0 && numSelected === rowCheckboxes.length;
            }

            function updatePagination(page, totalPages, totalCount, itemsOnPage) {
                if (totalCount > 0) {
                    const startItem = (page - 1) * itemsPerPage + 1;
                    const endItem = startItem + itemsOnPage - 1;
                    paginationInfo.textContent = `Hiển thị ${startItem}-${endItem} trên ${totalCount} người dùng`;
                } else {
                    paginationInfo.textContent = 'Không có người dùng nào để hiển thị';
                }

                paginationElement.innerHTML = '';
                if (totalPages <= 1) return;

                const createButton = (text, pageNum, isDisabled = false, isCurrent = false) => {
                    const button = document.createElement('button');
                    button.textContent = text;
                    button.disabled = isDisabled;
                    if (isCurrent) button.classList.add('current');
                    button.addEventListener('click', () => loadLockedUsersTable(pageNum));
                    return button;
                };

                paginationElement.appendChild(createButton('Trước', page - 1, page === 1));
                // Logic hiển thị ... cho pagination phức tạp hơn có thể thêm vào đây nếu cần
                for (let i = 1; i <= totalPages; i++) {
                     paginationElement.appendChild(createButton(i.toString(), i, false, i === page));
                }
                paginationElement.appendChild(createButton('Tiếp', page + 1, page === totalPages));
            }

            // Initial load
            loadLockedUsersTable(1);
        });
    </script>
}