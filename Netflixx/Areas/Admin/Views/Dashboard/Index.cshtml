@model IEnumerable<Netflixx.Models.DailyRevenueModel>
@{
    ViewData["Title"] = "Dashboard Overview";
    Layout = "_AdminLayout";

    // Đảm bảo các giá trị ViewBag tồn tại
    var revenueChange = ViewBag.RevenueChange as double? ?? 0;
    var transactionChange = ViewBag.TransactionChange as double? ?? 0;
    var avgTransactionChange = ViewBag.AvgTransactionChange as double? ?? 0;
    var activeUsersChange = ViewBag.ActiveUsersChange as double? ?? 0;
}

<style>
    /* Updated color scheme */
    :root {
        --teal: #4ECDB4;
        --charcoal-dark: #2D2F3B;
        --light-gray: #F5F6FA;
        --dark-gray: #333333;
        --golden-yellow: #F1C40F;
        --emerald-green: #2ECC71;
        --alizarin-red: #E74C3C;
        --white: #FFFFFF;
    }

    /* Điều chỉnh chính */
    .dashboard {
        background-color: var(--light-gray);
        color: var(--dark-gray);
        min-height: 100vh;
        margin-left: 150px; /* Giảm từ 180px xuống 150px */
        padding: 1.5rem; /* Giảm padding */
        padding-top: 70px; /* Giảm padding top */
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        width: calc(100% - 150px); /* Điều chỉnh theo margin-left */
    }

    /* Điều chỉnh tiêu đề dashboard */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--teal);
        padding-left: 0; /* Giảm padding trái */
    }

    .dashboard-title {
        color: var(--charcoal-dark);
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
    }

    .dashboard-controls {
        display: flex;
        gap: 1rem;
        position: relative;
    }

    .dashboard-btn {
        background-color: var(--teal);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .dashboard-btn:hover {
            background-color: #3bb9a4;
        }

    .dashboard-select {
        background-color: var(--white);
        color: var(--dark-gray);
        border: 1px solid var(--teal);
        padding: 0.5rem;
        border-radius: 4px;
    }

    /* Căn chỉnh các thẻ thống kê đều nhau */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background-color: var(--white);
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s, box-shadow 0.2s;
        display: flex;
        flex-direction: column;
        height: 120px; /* Cố định chiều cao */
        justify-content: space-between; /* Căn đều nội dung */
    }


    .stat-title {
        color: #757575;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 0.5rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .stat-value {
        color: var(--dark-gray);
        font-size: 1.6rem; /* Giảm kích thước chút để đảm bảo hiển thị */
        font-weight: 700;
        margin-bottom: 0.5rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.2; /* Điều chỉnh line-height */
    }

    .stat-change {
        font-size: 0.8rem;
        display: flex;
        align-items: center;
        gap: 0.3rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

        .stat-change.up {
            color: var(--emerald-green);
        }

        .stat-change.down {
            color: var(--alizarin-red);
        }

    .chart-container {
        background-color: var(--white);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .chart-title {
        color: var(--charcoal-dark);
        font-size: 1.3rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
        background-color: var(--white);
    }

        .data-table th {
            text-align: left;
            padding: 1rem;
            color: var(--teal);
            font-weight: 500;
            border-bottom: 1px solid var(--teal);
        }

        .data-table td {
            padding: 1rem;
            border-bottom: 1px solid #e0e0e0;
        }

    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .status-completed {
        background-color: rgba(46, 204, 113, 0.2);
        color: var(--emerald-green);
    }

    .status-pending {
        background-color: rgba(241, 196, 15, 0.2);
        color: var(--golden-yellow);
    }

    .status-failed {
        background-color: rgba(231, 76, 60, 0.2);
        color: var(--alizarin-red);
    }

    .section-title {
        color: var(--charcoal-dark);
        font-size: 1.3rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .popular-film {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem 0;
        border-bottom: 1px solid #e0e0e0;
    }

        .popular-film:last-child {
            border-bottom: none;
        }

    .film-rank {
        color: #757575;
        font-weight: 700;
        width: 2rem;
        text-align: center;
    }

    .film-poster {
        width: 50px;
        height: 75px;
        object-fit: cover;
        border-radius: 4px;
    }

    .film-info {
        flex: 1;
    }

    .film-title {
        color: var(--charcoal-dark);
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .film-meta {
        color: #757575;
        font-size: 0.8rem;
    }

    .two-column {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-top: 2rem;
    }

    #revenue-chart {
        height: 300px;
        width: 100%;
        background-color: #fff;
        border: 1px solid #eee;
    }

    .morris-hover {
        background: var(--white) !important;
        border: 1px solid var(--teal) !important;
        color: var(--dark-gray) !important;
    }

    .chart-container {
        position: relative;
        min-height: 300px;
        margin-bottom: 20px;
    }

    /* Điều chỉnh các phần khác nếu cần */
    .chart-container, .two-column {
        margin-left: 0; /* Loại bỏ margin trái thừa */
        padding-left: 0;
    }

    /* Export dropdown styles */
    .export-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: white;
        border-radius: 4px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        min-width: 150px;
        overflow: hidden;
    }

    .export-option {
        display: block;
        width: 100%;
        padding: 0.75rem 1rem;
        text-align: left;
        background: none;
        border: none;
        color: var(--dark-gray);
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .export-option:hover {
            background-color: #f5f5f5;
        }

        .export-option i {
            margin-right: 0.5rem;
            width: 20px;
            text-align: center;
        }
</style>

<div class="dashboard">
    <div class="dashboard-header">
        <h1 class="dashboard-title">Dashboard</h1>
        <div class="dashboard-controls">
            <button class="dashboard-btn" id="export-btn">
                <i class="fas fa-download"></i> Xuất báo cáo
            </button>
            <select class="dashboard-select" id="period-select">
                <option value="30days" selected="@(ViewBag.SelectedPeriod == "30days")">30 ngày qua</option>
                <option value="thismonth" selected="@(ViewBag.SelectedPeriod == "thismonth")">Tháng này</option>
                <option value="lastmonth" selected="@(ViewBag.SelectedPeriod == "lastmonth")">Tháng trước</option>
            </select>
        </div>
    </div>

    <!-- Thẻ thống kê -->
    <div class="stats-grid">
        <!-- Thẻ tổng doanh thu -->
        <div class="stat-card">
            <div class="stat-title">Tổng doanh thu</div>
            <div class="stat-value">
                @((ViewBag.TotalRevenue ?? 0).ToString("N0")) <span>₫</span>
            </div>
            <div class="stat-change @((ViewBag.RevenueChange ?? 0) >= 0 ? "up" : "down")">
                <i class="fas fa-arrow-@((ViewBag.RevenueChange ?? 0) >= 0 ? "up" : "down")"></i>
                @Math.Abs(ViewBag.RevenueChange ?? 0).ToString("P1") so với kỳ trước
            </div>
        </div>

        <!-- Thẻ giao dịch -->
        <div class="stat-card">
            <div class="stat-title">Số giao dịch</div>
            <div class="stat-value">@(ViewBag.TotalTransactions ?? 0)</div>
            <div class="stat-change @((ViewBag.TransactionChange ?? 0) >= 0 ? "up" : "down")">
                <i class="fas fa-arrow-@((ViewBag.TransactionChange ?? 0) >= 0 ? "up" : "down")"></i>
                @Math.Abs(ViewBag.TransactionChange ?? 0).ToString("P1") so với kỳ trước
            </div>
        </div>

        <!-- Thẻ giá trị trung bình giao dịch -->
        <div class="stat-card">
            <div class="stat-title">Trung bình giao dịch</div>
            <div class="stat-value">
                @((ViewBag.AvgTransaction ?? 0).ToString("N0")) <span>₫</span>
            </div>
            <div class="stat-change @((ViewBag.AvgTransactionChange ?? 0) >= 0 ? "up" : "down")">
                <i class="fas fa-arrow-@((ViewBag.AvgTransactionChange ?? 0) >= 0 ? "up" : "down")"></i>
                @Math.Abs(ViewBag.AvgTransactionChange ?? 0).ToString("P1") so với kỳ trước
            </div>
        </div>

        <!-- Thay đổi thẻ Người dùng hoạt động thành Tài khoản mới -->
        <div class="stat-card">
            <div class="stat-title">Tài khoản mới</div>
            <div class="stat-value">@(ViewBag.NewAccounts ?? 0)</div>
            <div class="stat-change @((ViewBag.NewAccountsChange ?? 0) >= 0 ? "up" : "down")">
                <i class="fas fa-arrow-@((ViewBag.NewAccountsChange ?? 0) >= 0 ? "up" : "down")"></i>
                @Math.Abs(ViewBag.NewAccountsChange ?? 0).ToString("P1") so với kỳ trước
            </div>
        </div>
    </div>

    <!-- Biểu đồ doanh thu -->
    <div class="chart-container">
        <h2 class="chart-title">Tổng quan doanh thu</h2>
        <div id="revenue-chart"></div>
    </div>

    <!-- Bố cục 2 cột -->
    <div class="two-column">
        <!-- Giao dịch gần đây -->
        <div>
            <h2 class="section-title">Giao dịch gần đây</h2>
            @if (ViewBag.RecentTransactions != null && ViewBag.RecentTransactions.Count > 0)
            {
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Người dùng</th>
                            <th>Số tiền</th>
                            <th>Ngày</th>
                            <th>Trạng thái</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in ViewBag.RecentTransactions)
                        {
                            <tr>
                                <td>@(transaction.User?.FullName ?? transaction.User?.UserName ?? "Không có")</td>
                                <td>@transaction.Amount.ToString("N0") ₫</td>
                                <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                <td>
                                    @{
                                        var statusClass = transaction.Status switch
                                        {
                                            "Completed" => "status-completed",
                                            "Pending" => "status-pending",
                                            _ => "status-failed"
                                        };
                                    }
                                    <span class="status-badge @statusClass">@transaction.Status</span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-info">Không tìm thấy giao dịch gần đây</div>
            }
        </div>

        <!-- Phim phổ biến -->
        <div>
            <h2 class="section-title">Phim phổ biến tuần này</h2>
            @if (ViewBag.PopularFilms != null && ViewBag.PopularFilms.Count > 0)
            {
                <div>
                    @foreach (var film in ViewBag.PopularFilms)
                    {
                        <div class="popular-film">
                            <div class="film-rank">@(ViewBag.PopularFilms.IndexOf(film) + 1)</div>
                            @if (!string.IsNullOrEmpty(film.Film?.PosterPath))
                            {
                                <img src="https://image.tmdb.org/t/p/w500/@film.Film.PosterPath"
                                     class="film-poster"
                                     alt="@film.Film.Title"
                                     onerror="this.src='/images/default-poster.jpg'">
                            }
                            else
                            {
                                <img src="/images/default-poster.jpg" class="film-poster" alt="Không có poster">
                            }
                            <div class="film-info">
                                <div class="film-title">@(film.Film?.Title ?? "Không có tiêu đề")</div>
                                <div class="film-meta">@film.PurchaseCount lượt mua</div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">Không tìm thấy phim phổ biến</div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <script>
        $(document).ready(function() {
            var revenueChart = null;
            var currentData = [];

            function initChart(data) {
                var chartData = data.map(function(item) {
                    return {
                        date: item.date,
                        value: item.value
                    };
                });

                // Store current data for export
                currentData = data;

                if (revenueChart) {
                    revenueChart.setData(chartData);
                } else {
                    revenueChart = new Morris.Line({
                        element: 'revenue-chart',
                        data: chartData,
                        xkey: 'date',
                        ykeys: ['value'],
                        labels: ['Doanh thu'],
                        lineColors: ['#4ECDB4'],
                        pointFillColors: ['#FFFFFF'],
                        pointStrokeColors: ['#4ECDB4'],
                        gridTextColor: '#b3b3b3',
                        gridStrokeWidth: 0.5,
                        gridLineColor: '#e0e0e0',
                        resize: true,
                        xLabels: 'day',
                        xLabelFormat: function(dateString) {
                            var date = new Date(dateString);
                            return date.getDate() + '/' + (date.getMonth() + 1);
                        },
                        hoverCallback: function(index, options, content, row) {
                            var date = new Date(row.date);
                            var formattedDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();
                            return formattedDate + '<br>Doanh thu: ' + row.value.toLocaleString() + ' ₫';
                        },
                        yLabelFormat: function(value) {
                            return value.toLocaleString() + ' ₫';
                        }
                    });
                }
            }

            function loadChartData() {
                var period = $('#period-select').val();
                var url = '@Url.Action("GetRevenueData", "Dashboard", new { area = "Admin" })?period=' + period;

                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    success: function(data) {
                        console.log('Dữ liệu từ server:', data);
                        if (data && data.length > 0) {
                            initChart(data);
                        } else {
                            $('#revenue-chart').html('<div class="alert alert-info">Không có dữ liệu để hiển thị</div>');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Lỗi khi tải dữ liệu:', error);
                        $('#revenue-chart').html('<div class="alert alert-danger">Không thể tải dữ liệu biểu đồ: ' + error + '</div>');
                    }
                });
            }

            $('#period-select').change(loadChartData);
            loadChartData();

            // Xử lý nút xuất báo cáo
            $('#export-btn').click(function() {
                if (currentData.length === 0) {
                    alert('Không có dữ liệu để xuất báo cáo');
                    return;
                }

                // Tạo menu dropdown cho các định dạng xuất
                var exportMenu = `
                    <div class="export-dropdown">
                        <button class="export-option" data-type="excel"><i class="fas fa-file-excel"></i> Excel</button>
                        <button class="export-option" data-type="pdf"><i class="fas fa-file-pdf"></i> PDF</button>
                        <button class="export-option" data-type="csv"><i class="fas fa-file-csv"></i> CSV</button>
                    </div>
                `;

                // Hiển thị menu
                var $menu = $(exportMenu).css({
                    position: 'absolute',
                    top: $('#export-btn').offset().top + $('#export-btn').outerHeight(),
                    left: $('#export-btn').offset().left - 100,
                    backgroundColor: 'white',
                    boxShadow: '0 2px 5px rgba(0,0,0,0.2)',
                    zIndex: 1000,
                    padding: '10px',
                    borderRadius: '4px'
                }).appendTo('body');

                // Xử lý khi click ra ngoài
                $(document).on('click', function(e) {
                    if (!$(e.target).closest('.export-dropdown, #export-btn').length) {
                        $menu.remove();
                        $(document).off('click');
                    }
                });

                // Xử lý chọn định dạng
                $menu.on('click', '.export-option', function() {
                    var type = $(this).data('type');
                    var period = $('#period-select').val();
                    
                    // Gửi yêu cầu xuất báo cáo đến server
                    $.ajax({
                        url: '@Url.Action("ExportReport", "Dashboard", new { area = "Admin" })',
                        type: 'POST',
                        data: {
                            format: type,
                            period: period
                        },
                        xhrFields: {
                            responseType: 'blob'
                        },
                        success: function(blob) {
                            // Tạo URL tạm thời và tự động download
                            var url = window.URL.createObjectURL(blob);
                            var a = document.createElement('a');
                            a.href = url;
                            
                            // Đặt tên file dựa trên loại file
                            var fileName = 'Bao_cao_doanh_thu_' + new Date().toISOString().split('T')[0];
                            if (type === 'excel') {
                                fileName += '.xlsx';
                                a.download = fileName;
                            } else if (type === 'pdf') {
                                fileName += '.pdf';
                                a.download = fileName;
                            } else if (type === 'csv') {
                                fileName += '.csv';
                                a.download = fileName;
                            }
                            
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);
                            window.URL.revokeObjectURL(url);
                        },
                        error: function(xhr, status, error) {
                            console.error('Lỗi khi xuất báo cáo:', error);
                            alert('Có lỗi xảy ra khi xuất báo cáo: ' + error);
                        }
                    });

                    $menu.remove();
                    $(document).off('click');
                });
            });
        });
    </script>
}