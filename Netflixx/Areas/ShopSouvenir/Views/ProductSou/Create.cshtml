@model Netflixx.Models.Souvenir.ProductSouModel
@{
    ViewData["Title"] = "Thêm sản phẩm";
    Layout = null; // If you need a layout, replace with "_Layout"
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <!-- Load jQuery (only once) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Summernote CSS -->
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet">
    <style>
        /* Override select styles */
        select.form-control {
            -webkit-appearance: menulist !important;
            -moz-appearance: menulist !important;
            appearance: menulist !important;
            background-image: none !important;
            height: auto !important;
            padding: 8px 12px !important;
            border: 1px solid #ddd !important;
            border-radius: 4px !important;
            position: relative !important;
            z-index: 1 !important;
        }

        /* Disable all transform/transition */
        * {
            transform: none !important;
            transition: none !important;
        }

        .input-validation-error {
            border-color: #dc3545;
        }

        .validation-summary-errors ul {
            padding-left: 0;
            list-style: none;
        }

        /* Summernote styles */
        .note-editor.note-frame {
            border: 1px solid #ddd !important;
            border-radius: 4px !important;
        }

            .note-editor.note-frame .note-toolbar {
                background-color: #f8f9fa !important;
                border-bottom: 1px solid #ddd !important;
            }

        .note-editable {
            background-color: white !important;
            min-height: 150px !important;
        }

        /* Custom button icons */
        .note-btn-uppercase::before {
            content: "ABC";
            font-weight: bold;
        }

        .note-btn-lowercase::before {
            content: "abc";
            font-weight: normal;
        }
    </style>
</head>
<body>
    <h3>@ViewData["Title"]</h3>
    <div style="display:none;">
        @{
            var categoryList = ViewBag.CategoryId as SelectList;
            var brandList = ViewBag.BrandId as SelectList;
            var seriesList = ViewBag.SeriesId as SelectList;
        }
        Categories: @(categoryList?.Count() ?? 0) items
        Brands: @(brandList?.Count() ?? 0) items
        Series: @(seriesList?.Count() ?? 0) items
    </div>
    <div style="display:none;" id="debug-info">
        <h4>Debug HTML Output</h4>
        <div>
            <h5>Category Select:</h5>
            <select>
                @foreach (var item in ViewBag.CategoryId as SelectList)
                {
                    <option value="@item.Value">@item.Text</option>
                }
            </select>
        </div>
    </div>

    <div class="col-md-9">
        @if (TempData["success"] != null)
        {
            <div class="alert alert-success">@TempData["success"]</div>
        }
        @if (TempData["error"] != null)
        {
            <div class="alert alert-danger">@TempData["error"]</div>
        }

        <form asp-action="Create" method="post" enctype="multipart/form-data" id="productForm">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="All" class="alert alert-danger"></div>

            <div class="form-group">
                <label asp-for="Name" class="control-label">Tên sản phẩm</label>
                <input asp-for="Name" class="form-control" name="Name" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CategoryId" class="control-label">Danh mục</label>
                <select asp-for="CategoryId" class="form-control" name="CategoryId">
                    <option value="">-- Chọn danh mục --</option>
                    @foreach (var item in ViewBag.CategoryId as SelectList)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="BrandId" class="control-label">Hãng sản xuất</label>
                <select asp-for="BrandId" class="form-control" name="BrandId">
                    <option value="">-- Chọn hãng sản xuất --</option>
                    @foreach (var item in ViewBag.BrandId as SelectList)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
                <span asp-validation-for="BrandId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="SeriesId" class="control-label">Dòng sản phẩm</label>
                <select asp-for="SeriesId" class="form-control" name="SeriesId">
                    <option value="">-- Chọn dòng sản phẩm --</option>
                    @foreach (var item in ViewBag.SeriesId as SelectList)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
                <span asp-validation-for="SeriesId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Price" class="control-label">Giá</label>
                <input asp-for="Price" class="form-control typing-price" name="Price" type="number" step="0.01" min="0" />
                <span id="price-convert" class="text-success"></span>
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="StockQuantity" class="control-label">Số lượng tồn kho</label>
                <input asp-for="StockQuantity" class="form-control" name="StockQuantity" type="number" min="0" />
                <span asp-validation-for="StockQuantity" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description" class="control-label">Mô tả</label>
                <textarea asp-for="Description" class="form-control" id="Description" name="Description"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ImageUpload" class="control-label">Hình ảnh sản phẩm</label>
                <input asp-for="ImageUpload" class="form-control" type="file" accept="image/*" name="ImageUpload" />
                <span asp-validation-for="ImageUpload" class="text-danger"></span>
                <img id="imgpreview" class="pt-2" style="display:none; max-width:200px; max-height:200px;" />
            </div>

            <div class="form-group mt-3">
                <button type="submit" class="btn btn-primary">Thêm mới</button>
                <a asp-action="Index" class="btn btn-secondary">Quay lại</a>
            </div>
        </form>
    </div>

    <!-- Scripts Section -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/lang/summernote-vi-VN.min.js"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            console.log("Document ready - Initializing Summernote");

            // Define custom Summernote buttons for uppercase and lowercase
            var UppercaseButton = function (context) {
                var ui = $.summernote.ui;
                var button = ui.button({
                    contents: '<i class="note-btn-uppercase"></i>',
                    tooltip: 'Chữ hoa',
                    click: function () {
                        var range = context.invoke('editor.getSelectedRange');
                        var selectedText = range.toString();
                        if (selectedText) {
                            context.invoke('editor.pasteHTML', selectedText.toUpperCase());
                        }
                    }
                });
                return button.render();
            };

            var LowercaseButton = function (context) {
                var ui = $.summernote.ui;
                var button = ui.button({
                    contents: '<i class="note-btn-lowercase"></i>',
                    tooltip: 'Chữ thường',
                    click: function () {
                        var range = context.invoke('editor.getSelectedRange');
                        var selectedText = range.toString();
                        if (selectedText) {
                            context.invoke('editor.pasteHTML', selectedText.toLowerCase());
                        }
                    }
                });
                return button.render();
            };

            // Initialize Summernote
            if ($('#Description').length) {
                $('#Description').summernote({
                    height: 200,
                    lang: 'vi-VN',
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['strikethrough', 'superscript', 'subscript']],
                        ['fontsize', ['fontsize']],
                        ['color', ['color']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['height', ['height']],
                        ['insert', ['link', 'picture', 'video']],
                        ['view', ['fullscreen', 'codeview', 'help']],
                        ['custom', ['uppercase', 'lowercase']]
                    ],
                    buttons: {
                        uppercase: UppercaseButton,
                        lowercase: LowercaseButton
                    },
                    placeholder: 'Nhập mô tả sản phẩm...',
                    callbacks: {
                        onInit: function () {
                            console.log("Summernote initialized successfully");
                        },
                        onChange: function (contents) {
                            $('#Description').val(contents);
                        }
                    }
                });
            } else {
                console.error("Textarea with ID 'Description' not found");
            }

            // Ensure Summernote content is synced before form submission
            $('#productForm').on('submit', function () {
                var summernoteContent = $('#Description').summernote('code');
                $('#Description').val(summernoteContent);
                console.log("Form values before submission:", {
                    Name: $('#Name').val(),
                    CategoryId: $('#CategoryId').val(),
                    BrandId: $('#BrandId').val(),
                    SeriesId: $('#SeriesId').val(),
                    Price: $('#Price').val(),
                    StockQuantity: $('#StockQuantity').val(),
                    Description: summernoteContent,
                    ImageUpload: $('#ImageUpload')[0].files[0]?.name
                });
            });

            // Image preview
            $("#ImageUpload").on("change", function() {
                readURL(this);
            });

            function readURL(input) {
                if (input.files && input.files[0]) {
                    let reader = new FileReader();
                    reader.onload = function(e) {
                        $('#imgpreview').attr('src', e.target.result)
                                       .width(200)
                                       .height(200)
                                       .show();
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            }

            // Price formatting in VND
            $(".typing-price").on("keyup", function () {
                var currency_input = $(this).val();
                $("#price-convert").html(
                    new Intl.NumberFormat('vn-VN', { style: 'currency', currency: 'VND' }).format(currency_input)
                );
            });
        });
    </script>
</body>
</html>