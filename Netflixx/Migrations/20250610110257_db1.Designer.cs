// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netflixx.Repositories;

#nullable disable

namespace Netflixx.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250610110257_db1")]
    partial class db1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Netflixx.Models.AppUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FavoriteGenres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Netflixx.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FilmId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("FilmId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Netflixx.Models.ChannelSubscriptionsModel", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionID"));

                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("UserID");

                    b.ToTable("ChannelSubscriptions", t =>
                        {
                            t.HasCheckConstraint("CK_ChannelSubscriptions_Dates", "EndDate >= StartDate");
                        });
                });

            modelBuilder.Entity("Netflixx.Models.ChannelsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Netflixx.Models.DailyRevenueModel", b =>
                {
                    b.Property<DateTime>("RevenueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("int");

                    b.HasKey("RevenueDate");

                    b.ToTable("DailyRevenue");
                });

            modelBuilder.Entity("Netflixx.Models.FilmPurchasesModel", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseID"));

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("PointsUsed")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PurchaseID");

                    b.HasIndex("FilmID");

                    b.HasIndex("PaymentTransactionID");

                    b.HasIndex("UserID", "PurchaseDate");

                    b.ToTable("FilmPurchases");
                });

            modelBuilder.Entity("Netflixx.Models.FilmsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("FilmURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductionManagerId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionManagerId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Netflixx.Models.PackageChannelsModel", b =>
                {
                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.HasKey("PackageID", "ChannelID");

                    b.HasIndex("ChannelID");

                    b.ToTable("PackageChannels");
                });

            modelBuilder.Entity("Netflixx.Models.PackageFilmsModel", b =>
                {
                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.HasKey("PackageID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("PackageFilms");
                });

            modelBuilder.Entity("Netflixx.Models.PackageSubscriptionsModel", b =>
                {
                    b.Property<int>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscriptionID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserID");

                    b.ToTable("PackageSubscriptions", t =>
                        {
                            t.HasCheckConstraint("CK_PackageSubscriptions_Dates", "EndDate >= StartDate");
                        });
                });

            modelBuilder.Entity("Netflixx.Models.PackagesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Netflixx.Models.PaymentEnvironmentsModel", b =>
                {
                    b.Property<int>("EnvironmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnvironmentID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentID");

                    b.ToTable("PaymentEnvironments");
                });

            modelBuilder.Entity("Netflixx.Models.PaymentProvidersModel", b =>
                {
                    b.Property<int>("ProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderID");

                    b.ToTable("PaymentProviders");
                });

            modelBuilder.Entity("Netflixx.Models.PaymentTransactionsModel", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnvironmentID")
                        .HasColumnType("int");

                    b.Property<string>("ExternalTransactionRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransactionID");

                    b.HasIndex("EnvironmentID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("UserID");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("Netflixx.Models.PointsTransactionsModel", b =>
                {
                    b.Property<int>("PointsTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointsTransactionID"));

                    b.Property<int>("PointsChange")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RelatedTransactionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PointsTransactionID");

                    b.HasIndex("RelatedTransactionID");

                    b.HasIndex("UserID", "TransactionDate");

                    b.ToTable("PointsTransactions");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionChannelsModel", b =>
                {
                    b.Property<int>("PromotionID")
                        .HasColumnType("int");

                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.HasKey("PromotionID", "ChannelID");

                    b.HasIndex("ChannelID");

                    b.ToTable("PromotionChannels");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionFilmsModel", b =>
                {
                    b.Property<int>("PromotionID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.HasKey("PromotionID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("PromotionFilms");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionPackagesModel", b =>
                {
                    b.Property<int>("PromotionID")
                        .HasColumnType("int");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.HasKey("PromotionID", "PackageID");

                    b.HasIndex("PackageID");

                    b.ToTable("PromotionPackages");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionUsageModel", b =>
                {
                    b.Property<int>("UsageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsageID"));

                    b.Property<int>("PromotionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsageID");

                    b.HasIndex("PromotionID");

                    b.HasIndex("UserID");

                    b.ToTable("PromotionUsages");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionsModel", b =>
                {
                    b.Property<int>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PromotionID");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Netflixx.Models.UserAccountsModel", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PointsBalance")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("PackageSubscriptionUpgradesModel", b =>
                {
                    b.Property<int>("UpgradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpgradeID"));

                    b.Property<decimal>("AdditionalCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NewSubscriptionID")
                        .HasColumnType("int");

                    b.Property<int>("OldSubscriptionID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProratedCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpgradeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UpgradeID");

                    b.HasIndex("NewSubscriptionID");

                    b.HasIndex("OldSubscriptionID");

                    b.HasIndex("UserID");

                    b.ToTable("PackageSubscriptionUpgrades");
                });

            modelBuilder.Entity("ProductionManagerApp.Models.ProductionManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CEO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("EstablishedYear")
                        .HasColumnType("int");

                    b.Property<string>("Headquarters")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProductionManagers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Netflixx.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Netflixx.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Netflixx.Models.AppUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Netflixx.Models.BlogPost", b =>
                {
                    b.HasOne("Netflixx.Models.AppUserModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Netflixx.Models.FilmsModel", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId");

                    b.Navigation("Author");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Netflixx.Models.ChannelSubscriptionsModel", b =>
                {
                    b.HasOne("Netflixx.Models.ChannelsModel", "Channel")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithMany("ChannelSubscriptions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netflixx.Models.FilmPurchasesModel", b =>
                {
                    b.HasOne("Netflixx.Models.FilmsModel", "Film")
                        .WithMany("Purchases")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PaymentTransactionsModel", "PaymentTransaction")
                        .WithMany("FilmPurchases")
                        .HasForeignKey("PaymentTransactionID");

                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithMany("FilmPurchases")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("PaymentTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netflixx.Models.FilmsModel", b =>
                {
                    b.HasOne("ProductionManagerApp.Models.ProductionManager", "ProductionManager")
                        .WithMany("Films")
                        .HasForeignKey("ProductionManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProductionManager");
                });

            modelBuilder.Entity("Netflixx.Models.PackageChannelsModel", b =>
                {
                    b.HasOne("Netflixx.Models.ChannelsModel", "Channel")
                        .WithMany("PackageChannels")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PackagesModel", "Package")
                        .WithMany("PackageChannels")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Netflixx.Models.PackageFilmsModel", b =>
                {
                    b.HasOne("Netflixx.Models.FilmsModel", "Film")
                        .WithMany("PackageFilms")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PackagesModel", "Package")
                        .WithMany("PackageFilms")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Netflixx.Models.PackageSubscriptionsModel", b =>
                {
                    b.HasOne("Netflixx.Models.PackagesModel", "Package")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithMany("PackageSubscriptions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netflixx.Models.PaymentTransactionsModel", b =>
                {
                    b.HasOne("Netflixx.Models.PaymentEnvironmentsModel", "Environment")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("EnvironmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PaymentProvidersModel", "Provider")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netflixx.Models.PointsTransactionsModel", b =>
                {
                    b.HasOne("Netflixx.Models.PaymentTransactionsModel", "PaymentTransaction")
                        .WithMany("RelatedPointsTransactions")
                        .HasForeignKey("RelatedTransactionID");

                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithMany("PointsTransactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionChannelsModel", b =>
                {
                    b.HasOne("Netflixx.Models.ChannelsModel", "Channel")
                        .WithMany("PromotionChannels")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PromotionsModel", "Promotion")
                        .WithMany("PromotionChannels")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionFilmsModel", b =>
                {
                    b.HasOne("Netflixx.Models.FilmsModel", "Film")
                        .WithMany("PromotionFilms")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PromotionsModel", "Promotion")
                        .WithMany("PromotionFilms")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionPackagesModel", b =>
                {
                    b.HasOne("Netflixx.Models.PackagesModel", "Package")
                        .WithMany("PromotionPackages")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PromotionsModel", "Promotion")
                        .WithMany("PromotionPackages")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionUsageModel", b =>
                {
                    b.HasOne("Netflixx.Models.PromotionsModel", "Promotion")
                        .WithMany("PromotionUsages")
                        .HasForeignKey("PromotionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithMany("PromotionUsages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netflixx.Models.UserAccountsModel", b =>
                {
                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithOne("Account")
                        .HasForeignKey("Netflixx.Models.UserAccountsModel", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PackageSubscriptionUpgradesModel", b =>
                {
                    b.HasOne("Netflixx.Models.PackageSubscriptionsModel", "NewSubscription")
                        .WithMany("UpgradesTo")
                        .HasForeignKey("NewSubscriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.PackageSubscriptionsModel", "OldSubscription")
                        .WithMany("UpgradesFrom")
                        .HasForeignKey("OldSubscriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Netflixx.Models.AppUserModel", "User")
                        .WithMany("PackageSubscriptionUpgrades")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NewSubscription");

                    b.Navigation("OldSubscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Netflixx.Models.AppUserModel", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("ChannelSubscriptions");

                    b.Navigation("FilmPurchases");

                    b.Navigation("PackageSubscriptionUpgrades");

                    b.Navigation("PackageSubscriptions");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("PointsTransactions");

                    b.Navigation("PromotionUsages");
                });

            modelBuilder.Entity("Netflixx.Models.ChannelsModel", b =>
                {
                    b.Navigation("PackageChannels");

                    b.Navigation("PromotionChannels");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Netflixx.Models.FilmsModel", b =>
                {
                    b.Navigation("PackageFilms");

                    b.Navigation("PromotionFilms");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Netflixx.Models.PackageSubscriptionsModel", b =>
                {
                    b.Navigation("UpgradesFrom");

                    b.Navigation("UpgradesTo");
                });

            modelBuilder.Entity("Netflixx.Models.PackagesModel", b =>
                {
                    b.Navigation("PackageChannels");

                    b.Navigation("PackageFilms");

                    b.Navigation("PromotionPackages");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Netflixx.Models.PaymentEnvironmentsModel", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Netflixx.Models.PaymentProvidersModel", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Netflixx.Models.PaymentTransactionsModel", b =>
                {
                    b.Navigation("FilmPurchases");

                    b.Navigation("RelatedPointsTransactions");
                });

            modelBuilder.Entity("Netflixx.Models.PromotionsModel", b =>
                {
                    b.Navigation("PromotionChannels");

                    b.Navigation("PromotionFilms");

                    b.Navigation("PromotionPackages");

                    b.Navigation("PromotionUsages");
                });

            modelBuilder.Entity("ProductionManagerApp.Models.ProductionManager", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
